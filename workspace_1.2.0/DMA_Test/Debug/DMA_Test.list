
DMA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c8  080040c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d0  080040d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000000c  080040e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080040e4  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1bc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f91  00000000  00000000  0002d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002f190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024b52  00000000  00000000  00030818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5da  00000000  00000000  0005536a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4ce1  00000000  00000000  0005f944  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000306c  00000000  00000000  001446a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004090 	.word	0x08004090

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004090 	.word	0x08004090

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc7c 	bl	8000e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f80b 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f967 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f947 	bl	80007ac <MX_DMA_Init>
  MX_ADC1_Init();
 800051e:	f000 f895 	bl	800064c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f8e5 	bl	80006f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000526:	f000 f913 	bl	8000750 <MX_USB_OTG_FS_PCD_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x22>

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0b4      	sub	sp, #208	; 0xd0
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fda0 	bl	8004080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2284      	movs	r2, #132	; 0x84
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f003 fd91 	bl	8004080 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800055e:	f001 fe3f 	bl	80021e0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b37      	ldr	r3, [pc, #220]	; (8000640 <SystemClock_Config+0x114>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	4a36      	ldr	r2, [pc, #216]	; (8000640 <SystemClock_Config+0x114>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	6413      	str	r3, [r2, #64]	; 0x40
 800056e:	4b34      	ldr	r3, [pc, #208]	; (8000640 <SystemClock_Config+0x114>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <SystemClock_Config+0x118>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000582:	4a30      	ldr	r2, [pc, #192]	; (8000644 <SystemClock_Config+0x118>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <SystemClock_Config+0x118>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000596:	2301      	movs	r3, #1
 8000598:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b8:	2348      	movs	r3, #72	; 0x48
 80005ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c4:	2303      	movs	r3, #3
 80005c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fe16 	bl	8002200 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005da:	f000 fa21 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000602:	2102      	movs	r1, #2
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f86b 	bl	80026e0 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000610:	f000 fa06 	bl	8000a20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <SystemClock_Config+0x11c>)
 8000616:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000618:	2300      	movs	r3, #0
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa4e 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000632:	f000 f9f5 	bl	8000a20 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	37d0      	adds	r7, #208	; 0xd0
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000
 8000648:	00200100 	.word	0x00200100

0800064c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <MX_ADC1_Init+0x9c>)
 8000662:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_ADC1_Init+0x98>)
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <MX_ADC1_Init+0xa0>)
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_ADC1_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <MX_ADC1_Init+0x98>)
 80006ac:	f000 fc2c 	bl	8000f08 <HAL_ADC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f9b3 	bl	8000a20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006ba:	2305      	movs	r3, #5
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_ADC1_Init+0x98>)
 80006cc:	f000 fc60 	bl	8000f90 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006d6:	f000 f9a3 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000050c 	.word	0x2000050c
 80006e8:	40012000 	.word	0x40012000
 80006ec:	0f000001 	.word	0x0f000001

080006f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART3_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <MX_USART3_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART3_UART_Init+0x58>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART3_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART3_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART3_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART3_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART3_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART3_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART3_UART_Init+0x58>)
 8000734:	f002 fdb6 	bl	80032a4 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f96f 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	40004800 	.word	0x40004800

08000750 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800075a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2206      	movs	r2, #6
 8000760:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2201      	movs	r2, #1
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	f001 fbe7 	bl	8001f66 <HAL_PCD_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f93f 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000a8 	.word	0x200000a8

080007ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DMA_Init+0x38>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200e      	movs	r0, #14
 80007d0:	f000 fee7 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007d4:	200e      	movs	r0, #14
 80007d6:	f000 ff00 	bl	80015da <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b82      	ldr	r3, [pc, #520]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a81      	ldr	r2, [pc, #516]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b7f      	ldr	r3, [pc, #508]	; (8000a08 <MX_GPIO_Init+0x220>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4b7c      	ldr	r3, [pc, #496]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a7b      	ldr	r2, [pc, #492]	; (8000a08 <MX_GPIO_Init+0x220>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b79      	ldr	r3, [pc, #484]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b76      	ldr	r3, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a75      	ldr	r2, [pc, #468]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <MX_GPIO_Init+0x220>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b70      	ldr	r3, [pc, #448]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6f      	ldr	r2, [pc, #444]	; (8000a08 <MX_GPIO_Init+0x220>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b6d      	ldr	r3, [pc, #436]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b6a      	ldr	r3, [pc, #424]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a69      	ldr	r2, [pc, #420]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b67      	ldr	r3, [pc, #412]	; (8000a08 <MX_GPIO_Init+0x220>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	4b64      	ldr	r3, [pc, #400]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a63      	ldr	r2, [pc, #396]	; (8000a08 <MX_GPIO_Init+0x220>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b61      	ldr	r3, [pc, #388]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f244 0181 	movw	r1, #16513	; 0x4081
 8000894:	485d      	ldr	r0, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x224>)
 8000896:	f001 fb4d 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	485c      	ldr	r0, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x228>)
 80008a0:	f001 fb48 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	485a      	ldr	r0, [pc, #360]	; (8000a14 <MX_GPIO_Init+0x22c>)
 80008ac:	f001 fb42 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <MX_GPIO_Init+0x230>)
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4855      	ldr	r0, [pc, #340]	; (8000a1c <MX_GPIO_Init+0x234>)
 80008c6:	f001 f98b 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008ca:	2332      	movs	r3, #50	; 0x32
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008da:	230b      	movs	r3, #11
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	484d      	ldr	r0, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x234>)
 80008e6:	f001 f97b 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80008ea:	2382      	movs	r3, #130	; 0x82
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fa:	230b      	movs	r3, #11
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4843      	ldr	r0, [pc, #268]	; (8000a14 <MX_GPIO_Init+0x22c>)
 8000906:	f001 f96b 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090a:	2304      	movs	r3, #4
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091a:	2307      	movs	r3, #7
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	483b      	ldr	r0, [pc, #236]	; (8000a14 <MX_GPIO_Init+0x22c>)
 8000926:	f001 f95b 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092a:	f244 0381 	movw	r3, #16513	; 0x4081
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4832      	ldr	r0, [pc, #200]	; (8000a0c <MX_GPIO_Init+0x224>)
 8000944:	f001 f94c 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095a:	230b      	movs	r3, #11
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4829      	ldr	r0, [pc, #164]	; (8000a0c <MX_GPIO_Init+0x224>)
 8000966:	f001 f93b 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4823      	ldr	r0, [pc, #140]	; (8000a10 <MX_GPIO_Init+0x228>)
 8000982:	f001 f92d 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	481d      	ldr	r0, [pc, #116]	; (8000a10 <MX_GPIO_Init+0x228>)
 800099a:	f001 f921 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <MX_GPIO_Init+0x22c>)
 80009b8:	f001 f912 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ce:	230b      	movs	r3, #11
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_GPIO_Init+0x228>)
 80009da:	f001 f901 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009f0:	2308      	movs	r3, #8
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0x228>)
 80009fc:	f001 f8f0 	bl	8001be0 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	10110000 	.word	0x10110000
 8000a1c:	40020800 	.word	0x40020800

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x44>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x44>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_ADC_MspInit+0x74>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d123      	bne.n	8000ae2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aca:	2320      	movs	r3, #32
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_ADC_MspInit+0x7c>)
 8000ade:	f001 f87f 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40012000 	.word	0x40012000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <HAL_UART_MspInit+0x114>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d173      	bne.n	8000c02 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <HAL_UART_MspInit+0x118>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b74:	2307      	movs	r3, #7
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4825      	ldr	r0, [pc, #148]	; (8000c14 <HAL_UART_MspInit+0x11c>)
 8000b80:	f001 f82e 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_TX_Pin;
 8000b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481d      	ldr	r0, [pc, #116]	; (8000c18 <HAL_UART_MspInit+0x120>)
 8000ba2:	f001 f81d 	bl	8001be0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_UART_MspInit+0x128>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bb6:	2240      	movs	r2, #64	; 0x40
 8000bb8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000be8:	f000 fd12 	bl	8001610 <HAL_DMA_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000bf2:	f7ff ff15 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bfa:	669a      	str	r2, [r3, #104]	; 0x68
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_UART_MspInit+0x124>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	200004ac 	.word	0x200004ac
 8000c20:	40026058 	.word	0x40026058

08000c24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c44:	d141      	bne.n	8000cca <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c5e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c70:	230a      	movs	r3, #10
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <HAL_PCD_MspInit+0xb4>)
 8000c7c:	f000 ffb0 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <HAL_PCD_MspInit+0xb4>)
 8000c96:	f000 ffa3 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8a8 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <DMA1_Stream3_IRQHandler+0x10>)
 8000d3e:	f000 fd15 	bl	800176c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200004ac 	.word	0x200004ac

08000d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <SystemInit+0x5c>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <SystemInit+0x5c>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <SystemInit+0x60>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a11      	ldr	r2, [pc, #68]	; (8000dac <SystemInit+0x60>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <SystemInit+0x60>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <SystemInit+0x60>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <SystemInit+0x60>)
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <SystemInit+0x64>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <SystemInit+0x60>)
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <SystemInit+0x68>)
 8000d82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <SystemInit+0x60>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <SystemInit+0x60>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x60>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SystemInit+0x5c>)
 8000d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	fef6ffff 	.word	0xfef6ffff
 8000db4:	24003010 	.word	0x24003010

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dbe:	e003      	b.n	8000dc8 <LoopCopyDataInit>

08000dc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc6:	3104      	adds	r1, #4

08000dc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dd0:	d3f6      	bcc.n	8000dc0 <CopyDataInit>
  ldr  r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd4:	e002      	b.n	8000ddc <LoopFillZerobss>

08000dd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd8:	f842 3b04 	str.w	r3, [r2], #4

08000ddc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000de0:	d3f9      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffb3 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f003 f927 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fb8d 	bl	8000508 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000df4:	080040d8 	.word	0x080040d8
  ldr  r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dfc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e00:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e04:	20000558 	.word	0x20000558

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>

08000e0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 fbbc 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f805 	bl	8000e24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e1a:	f7ff fe09 	bl	8000a30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fbd7 	bl	80015f6 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e60:	f000 fb9f 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000554 	.word	0x20000554

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000554 	.word	0x20000554

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_Delay+0x40>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000008 	.word	0x20000008

08000f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e031      	b.n	8000f82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fda6 	bl	8000a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_ADC_Init+0x84>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	f043 0202 	orr.w	r2, r3, #2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f94e 	bl	80011f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f023 0303 	bic.w	r3, r3, #3
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
 8000f72:	e001      	b.n	8000f78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	ffffeefd 	.word	0xffffeefd

08000f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x1c>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e115      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x248>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	d935      	bls.n	8001028 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b1e      	subs	r3, #30
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	400a      	ands	r2, r1
 8000fe0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <HAL_ADC_ConfigChannel+0x254>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d10a      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68d9      	ldr	r1, [r3, #12]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	061a      	lsls	r2, r3, #24
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	e035      	b.n	800106e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68d9      	ldr	r1, [r3, #12]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	4603      	mov	r3, r0
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4403      	add	r3, r0
 800101a:	3b1e      	subs	r3, #30
 800101c:	409a      	lsls	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	e022      	b.n	800106e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6919      	ldr	r1, [r3, #16]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	2207      	movs	r2, #7
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	400a      	ands	r2, r1
 800104a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6919      	ldr	r1, [r3, #16]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	4603      	mov	r3, r0
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4403      	add	r3, r0
 8001064:	409a      	lsls	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b06      	cmp	r3, #6
 8001074:	d824      	bhi.n	80010c0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	3b05      	subs	r3, #5
 8001088:	221f      	movs	r2, #31
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	3b05      	subs	r3, #5
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	e04c      	b.n	800115a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d824      	bhi.n	8001112 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b23      	subs	r3, #35	; 0x23
 80010da:	221f      	movs	r2, #31
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b23      	subs	r3, #35	; 0x23
 8001104:	fa00 f203 	lsl.w	r2, r0, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
 8001110:	e023      	b.n	800115a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	3b41      	subs	r3, #65	; 0x41
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b41      	subs	r3, #65	; 0x41
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_ADC_ConfigChannel+0x258>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d109      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1e8>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d105      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_ADC_ConfigChannel+0x25c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_ADC_ConfigChannel+0x25c>)
 8001172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001176:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_ADC_ConfigChannel+0x258>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d125      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x23e>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_ADC_ConfigChannel+0x254>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d003      	beq.n	8001194 <HAL_ADC_ConfigChannel+0x204>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b11      	cmp	r3, #17
 8001192:	d11c      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_ADC_ConfigChannel+0x25c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_ADC_ConfigChannel+0x25c>)
 800119a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800119e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <HAL_ADC_ConfigChannel+0x254>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d111      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_ADC_ConfigChannel+0x260>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <HAL_ADC_ConfigChannel+0x264>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0c9a      	lsrs	r2, r3, #18
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f9      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	10000012 	.word	0x10000012
 80011e8:	40012000 	.word	0x40012000
 80011ec:	40012300 	.word	0x40012300
 80011f0:	20000000 	.word	0x20000000
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001200:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <ADC_Init+0x1ec>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a77      	ldr	r2, [pc, #476]	; (80013e4 <ADC_Init+0x1ec>)
 8001206:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800120a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800120c:	4b75      	ldr	r3, [pc, #468]	; (80013e4 <ADC_Init+0x1ec>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4973      	ldr	r1, [pc, #460]	; (80013e4 <ADC_Init+0x1ec>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	021a      	lsls	r2, r3, #8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800124c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800126e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <ADC_Init+0x1f0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d022      	beq.n	80012d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800129a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6899      	ldr	r1, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e00f      	b.n	80012f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0202 	bic.w	r2, r2, #2
 8001300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6899      	ldr	r1, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	005a      	lsls	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01b      	beq.n	8001358 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800133e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6859      	ldr	r1, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	035a      	lsls	r2, r3, #13
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	e007      	b.n	8001368 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001366:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	3b01      	subs	r3, #1
 8001384:	051a      	lsls	r2, r3, #20
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800139c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013aa:	025a      	lsls	r2, r3, #9
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6899      	ldr	r1, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	029a      	lsls	r2, r3, #10
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40012300 	.word	0x40012300
 80013e8:	0f000001 	.word	0x0f000001

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	4313      	orrs	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	05fa0000 	.word	0x05fa0000

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <__NVIC_EnableIRQ+0x38>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff29 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff3e 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff8e 	bl	80014e0 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5d 	bl	800148c <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff31 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fc46 	bl	8000eac <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e099      	b.n	8001760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164c:	e00f      	b.n	800166e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164e:	f7ff fc2d 	bl	8000eac <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b05      	cmp	r3, #5
 800165a:	d908      	bls.n	800166e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2220      	movs	r2, #32
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2203      	movs	r2, #3
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e078      	b.n	8001760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e8      	bne.n	800164e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_DMA_Init+0x158>)
 8001688:	4013      	ands	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d107      	bne.n	80016d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4313      	orrs	r3, r2
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f023 0307 	bic.w	r3, r3, #7
 80016ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d117      	bne.n	8001732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f9e9 	bl	8001aec <DMA_CheckFifoParam>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800172e:	2301      	movs	r3, #1
 8001730:	e016      	b.n	8001760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f9a0 	bl	8001a80 <DMA_CalcBaseAndBitshift>
 8001740:	4603      	mov	r3, r0
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	223f      	movs	r2, #63	; 0x3f
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	f010803f 	.word	0xf010803f

0800176c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_DMA_IRQHandler+0x258>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a92      	ldr	r2, [pc, #584]	; (80019c8 <HAL_DMA_IRQHandler+0x25c>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0a9b      	lsrs	r3, r3, #10
 8001784:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	2208      	movs	r2, #8
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01a      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0204 	bic.w	r2, r2, #4
 80017be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2208      	movs	r2, #8
 80017c6:	409a      	lsls	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	2201      	movs	r2, #1
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2201      	movs	r2, #1
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2204      	movs	r2, #4
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d012      	beq.n	8001844 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f043 0204 	orr.w	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2210      	movs	r2, #16
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d043      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d03c      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2210      	movs	r2, #16
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d018      	beq.n	80018ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d024      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
 800189a:	e01f      	b.n	80018dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01b      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
 80018ac:	e016      	b.n	80018dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0208 	bic.w	r2, r2, #8
 80018ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	2220      	movs	r2, #32
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 808e 	beq.w	8001a0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8086 	beq.w	8001a0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2220      	movs	r2, #32
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b05      	cmp	r3, #5
 8001914:	d136      	bne.n	8001984 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0216 	bic.w	r2, r2, #22
 8001924:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001934:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <HAL_DMA_IRQHandler+0x1da>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0208 	bic.w	r2, r2, #8
 8001954:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	223f      	movs	r2, #63	; 0x3f
 800195c:	409a      	lsls	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	2b00      	cmp	r3, #0
 8001978:	d07d      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
        }
        return;
 8001982:	e078      	b.n	8001a76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01c      	beq.n	80019cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d108      	bne.n	80019b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d030      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4798      	blx	r3
 80019b0:	e02b      	b.n	8001a0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d027      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
 80019c2:	e022      	b.n	8001a0a <HAL_DMA_IRQHandler+0x29e>
 80019c4:	20000000 	.word	0x20000000
 80019c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10f      	bne.n	80019fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0210 	bic.w	r2, r2, #16
 80019e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d032      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d022      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d307      	bcc.n	8001a52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f2      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x2ca>
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
 8001a74:	e000      	b.n	8001a78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a76:	bf00      	nop
    }
  }
}
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop

08001a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3b10      	subs	r3, #16
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <DMA_CalcBaseAndBitshift+0x60>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d908      	bls.n	8001ac0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	1d1a      	adds	r2, r3, #4
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	659a      	str	r2, [r3, #88]	; 0x58
 8001abe:	e006      	b.n	8001ace <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	aaaaaaab 	.word	0xaaaaaaab
 8001ae4:	080040c0 	.word	0x080040c0
 8001ae8:	fffffc00 	.word	0xfffffc00

08001aec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11f      	bne.n	8001b46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d855      	bhi.n	8001bb8 <DMA_CheckFifoParam+0xcc>
 8001b0c:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <DMA_CheckFifoParam+0x28>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001b37 	.word	0x08001b37
 8001b1c:	08001b25 	.word	0x08001b25
 8001b20:	08001bb9 	.word	0x08001bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d045      	beq.n	8001bbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b34:	e042      	b.n	8001bbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b3e:	d13f      	bne.n	8001bc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b44:	e03c      	b.n	8001bc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4e:	d121      	bne.n	8001b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d836      	bhi.n	8001bc4 <DMA_CheckFifoParam+0xd8>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <DMA_CheckFifoParam+0x70>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b73 	.word	0x08001b73
 8001b64:	08001b6d 	.word	0x08001b6d
 8001b68:	08001b85 	.word	0x08001b85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b70:	e02f      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d024      	beq.n	8001bc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b82:	e021      	b.n	8001bc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b8c:	d11e      	bne.n	8001bcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b92:	e01b      	b.n	8001bcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d902      	bls.n	8001ba0 <DMA_CheckFifoParam+0xb4>
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d003      	beq.n	8001ba6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b9e:	e018      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba4:	e015      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00e      	beq.n	8001bd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb6:	e00b      	b.n	8001bd0 <DMA_CheckFifoParam+0xe4>
      break;
 8001bb8:	bf00      	nop
 8001bba:	e00a      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bbc:	bf00      	nop
 8001bbe:	e008      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bc0:	bf00      	nop
 8001bc2:	e006      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bc4:	bf00      	nop
 8001bc6:	e004      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bc8:	bf00      	nop
 8001bca:	e002      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001bcc:	bf00      	nop
 8001bce:	e000      	b.n	8001bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bd0:	bf00      	nop
    }
  } 
  
  return status; 
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e175      	b.n	8001eec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8164 	bne.w	8001ee6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x4e>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d00b      	beq.n	8001cca <HAL_GPIO_Init+0xea>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80be 	beq.w	8001ee6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_GPIO_Init+0x320>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a64      	ldr	r2, [pc, #400]	; (8001f00 <HAL_GPIO_Init+0x320>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_GPIO_Init+0x320>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d82:	4a60      	ldr	r2, [pc, #384]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_GPIO_Init+0x328>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d037      	beq.n	8001e1e <HAL_GPIO_Init+0x23e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x32c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d031      	beq.n	8001e1a <HAL_GPIO_Init+0x23a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_GPIO_Init+0x330>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d02b      	beq.n	8001e16 <HAL_GPIO_Init+0x236>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a54      	ldr	r2, [pc, #336]	; (8001f14 <HAL_GPIO_Init+0x334>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x232>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a53      	ldr	r2, [pc, #332]	; (8001f18 <HAL_GPIO_Init+0x338>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <HAL_GPIO_Init+0x33c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x22a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x340>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a50      	ldr	r2, [pc, #320]	; (8001f24 <HAL_GPIO_Init+0x344>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <HAL_GPIO_Init+0x348>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4e      	ldr	r2, [pc, #312]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x21a>
 8001df6:	2309      	movs	r3, #9
 8001df8:	e012      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	e010      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e00e      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x240>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e30:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e62:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8c:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_GPIO_Init+0x350>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae86 	bls.w	8001c00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3724      	adds	r7, #36	; 0x24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40022400 	.word	0x40022400
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f68:	b08f      	sub	sp, #60	; 0x3c
 8001f6a:	af0a      	add	r7, sp, #40	; 0x28
 8001f6c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e10a      	b.n	800218e <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7fe fe49 	bl	8000c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fde4 	bl	8003b6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	687e      	ldr	r6, [r7, #4]
 8001fac:	466d      	mov	r5, sp
 8001fae:	f106 0410 	add.w	r4, r6, #16
 8001fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc2:	1d33      	adds	r3, r6, #4
 8001fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f001 fd78 	bl	8003abc <USB_CoreInit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0d7      	b.n	800218e <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fdd2 	bl	8003b8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e04a      	b.n	8002086 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	333d      	adds	r3, #61	; 0x3d
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	333c      	adds	r3, #60	; 0x3c
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	b298      	uxth	r0, r3
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3342      	adds	r3, #66	; 0x42
 800202c:	4602      	mov	r2, r0
 800202e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	333f      	adds	r3, #63	; 0x3f
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3344      	adds	r3, #68	; 0x44
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3348      	adds	r3, #72	; 0x48
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	3350      	adds	r3, #80	; 0x50
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3af      	bcc.n	8001ff0 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e044      	b.n	8002120 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	3301      	adds	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d3b5      	bcc.n	8002096 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	687e      	ldr	r6, [r7, #4]
 8002132:	466d      	mov	r5, sp
 8002134:	f106 0410 	add.w	r4, r6, #16
 8002138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002144:	e885 0003 	stmia.w	r5, {r0, r1}
 8002148:	1d33      	adds	r3, r6, #4
 800214a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214c:	6838      	ldr	r0, [r7, #0]
 800214e:	f001 fd49 	bl	8003be4 <USB_DevInit>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e014      	b.n	800218e <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f80b 	bl	8002198 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f001 ff09 	bl	8003f9e <USB_DevDisconnect>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002198 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_PCDEx_ActivateLPM+0x44>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	10000003 	.word	0x10000003

080021e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e25c      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	4b96      	ldr	r3, [pc, #600]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d00c      	beq.n	800224a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002230:	4b93      	ldr	r3, [pc, #588]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0x62>
 800223c:	4b90      	ldr	r3, [pc, #576]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b8d      	ldr	r3, [pc, #564]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x130>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e236      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x7a>
 800226c:	4b84      	ldr	r3, [pc, #528]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a83      	ldr	r2, [pc, #524]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x9c>
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7e      	ldr	r2, [pc, #504]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7b      	ldr	r2, [pc, #492]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a75      	ldr	r2, [pc, #468]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b73      	ldr	r3, [pc, #460]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a72      	ldr	r2, [pc, #456]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd8>
 80022c0:	4b6f      	ldr	r3, [pc, #444]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6e      	ldr	r2, [pc, #440]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b6c      	ldr	r3, [pc, #432]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6b      	ldr	r2, [pc, #428]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fde4 	bl	8000eac <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fde0 	bl	8000eac <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1ea      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b61      	ldr	r3, [pc, #388]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fdd0 	bl	8000eac <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fdcc 	bl	8000eac <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1d6      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x110>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d069      	beq.n	8002412 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b50      	ldr	r3, [pc, #320]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x190>
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x17a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1aa      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	493d      	ldr	r1, [pc, #244]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e040      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d023      	beq.n	80023e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a38      	ldr	r2, [pc, #224]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd82 	bl	8000eac <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ac:	f7fe fd7e 	bl	8000eac <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e188      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4929      	ldr	r1, [pc, #164]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
 80023de:	e018      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a26      	ldr	r2, [pc, #152]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fd5e 	bl	8000eac <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe fd5a 	bl	8000eac <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e164      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d038      	beq.n	8002490 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fe fd3b 	bl	8000eac <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243a:	f7fe fd37 	bl	8000eac <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e141      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x23a>
 8002458:	e01a      	b.n	8002490 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_RCC_OscConfig+0x280>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fd21 	bl	8000eac <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe fd1d 	bl	8000eac <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d903      	bls.n	8002484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e127      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
 8002480:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b94      	ldr	r3, [pc, #592]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a4 	beq.w	80025e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a8a      	ldr	r2, [pc, #552]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	4b85      	ldr	r3, [pc, #532]	; (80026dc <HAL_RCC_OscConfig+0x4dc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x4dc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a81      	ldr	r2, [pc, #516]	; (80026dc <HAL_RCC_OscConfig+0x4dc>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe fce5 	bl	8000eac <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe fce1 	bl	8000eac <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0eb      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	4b78      	ldr	r3, [pc, #480]	; (80026dc <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x31a>
 800250c:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a71      	ldr	r2, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	e02d      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x33c>
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a6c      	ldr	r2, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e01c      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x35e>
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a63      	ldr	r2, [pc, #396]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
 800255e:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a5d      	ldr	r2, [pc, #372]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d015      	beq.n	80025aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fc95 	bl	8000eac <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fc91 	bl	8000eac <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e099      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ee      	beq.n	8002586 <HAL_RCC_OscConfig+0x386>
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fc7f 	bl	8000eac <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fc7b 	bl	8000eac <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e083      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	4b43      	ldr	r3, [pc, #268]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a3e      	ldr	r2, [pc, #248]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06f      	beq.n	80026ce <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d067      	beq.n	80026ca <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d149      	bne.n	8002696 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a34      	ldr	r2, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fc4d 	bl	8000eac <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fc49 	bl	8000eac <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e053      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	019b      	lsls	r3, r3, #6
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	4313      	orrs	r3, r2
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800265c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002660:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fc1d 	bl	8000eac <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fc19 	bl	8000eac <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e023      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x476>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 800269c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fc03 	bl	8000eac <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fbff 	bl	8000eac <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e009      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_OscConfig+0x4d8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x4aa>
 80026c8:	e001      	b.n	80026ce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0ce      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b69      	ldr	r3, [pc, #420]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d910      	bls.n	8002728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 020f 	bic.w	r2, r3, #15
 800270e:	4964      	ldr	r1, [pc, #400]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b62      	ldr	r3, [pc, #392]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0b6      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002740:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a57      	ldr	r2, [pc, #348]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002758:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	494c      	ldr	r1, [pc, #304]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d040      	beq.n	8002804 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d115      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e07d      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e071      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e069      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4935      	ldr	r1, [pc, #212]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d4:	f7fe fb6a 	bl	8000eac <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fb66 	bl	8000eac <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e051      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d210      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 020f 	bic.w	r2, r3, #15
 800281a:	4921      	ldr	r1, [pc, #132]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e030      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4915      	ldr	r1, [pc, #84]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	490d      	ldr	r1, [pc, #52]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002872:	f000 f81d 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002876:	4601      	mov	r1, r0
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	fa21 f303 	lsr.w	r3, r1, r3
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_RCC_ClockConfig+0x1cc>)
 800288c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fac8 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00
 80028a4:	40023800 	.word	0x40023800
 80028a8:	080040a8 	.word	0x080040a8
 80028ac:	20000000 	.word	0x20000000

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	2300      	movs	r3, #0
 80028c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d007      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x32>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d008      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x38>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 80b4 	bne.w	8002a44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028de:	60bb      	str	r3, [r7, #8]
       break;
 80028e0:	e0b3      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028e4:	60bb      	str	r3, [r7, #8]
      break;
 80028e6:	e0b0      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b5a      	ldr	r3, [pc, #360]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04a      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b55      	ldr	r3, [pc, #340]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	f240 11ff 	movw	r1, #511	; 0x1ff
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	ea03 0501 	and.w	r5, r3, r1
 8002914:	ea04 0602 	and.w	r6, r4, r2
 8002918:	4629      	mov	r1, r5
 800291a:	4632      	mov	r2, r6
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f04f 0400 	mov.w	r4, #0
 8002924:	0154      	lsls	r4, r2, #5
 8002926:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800292a:	014b      	lsls	r3, r1, #5
 800292c:	4619      	mov	r1, r3
 800292e:	4622      	mov	r2, r4
 8002930:	1b49      	subs	r1, r1, r5
 8002932:	eb62 0206 	sbc.w	r2, r2, r6
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f04f 0400 	mov.w	r4, #0
 800293e:	0194      	lsls	r4, r2, #6
 8002940:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002944:	018b      	lsls	r3, r1, #6
 8002946:	1a5b      	subs	r3, r3, r1
 8002948:	eb64 0402 	sbc.w	r4, r4, r2
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	00e2      	lsls	r2, r4, #3
 8002956:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800295a:	00d9      	lsls	r1, r3, #3
 800295c:	460b      	mov	r3, r1
 800295e:	4614      	mov	r4, r2
 8002960:	195b      	adds	r3, r3, r5
 8002962:	eb44 0406 	adc.w	r4, r4, r6
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	0262      	lsls	r2, r4, #9
 8002970:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002974:	0259      	lsls	r1, r3, #9
 8002976:	460b      	mov	r3, r1
 8002978:	4614      	mov	r4, r2
 800297a:	4618      	mov	r0, r3
 800297c:	4621      	mov	r1, r4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	f7fd fc3e 	bl	8000208 <__aeabi_uldivmod>
 800298c:	4603      	mov	r3, r0
 800298e:	460c      	mov	r4, r1
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e049      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	f04f 0400 	mov.w	r4, #0
 800299e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	ea03 0501 	and.w	r5, r3, r1
 80029aa:	ea04 0602 	and.w	r6, r4, r2
 80029ae:	4629      	mov	r1, r5
 80029b0:	4632      	mov	r2, r6
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	f04f 0400 	mov.w	r4, #0
 80029ba:	0154      	lsls	r4, r2, #5
 80029bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029c0:	014b      	lsls	r3, r1, #5
 80029c2:	4619      	mov	r1, r3
 80029c4:	4622      	mov	r2, r4
 80029c6:	1b49      	subs	r1, r1, r5
 80029c8:	eb62 0206 	sbc.w	r2, r2, r6
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	0194      	lsls	r4, r2, #6
 80029d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029da:	018b      	lsls	r3, r1, #6
 80029dc:	1a5b      	subs	r3, r3, r1
 80029de:	eb64 0402 	sbc.w	r4, r4, r2
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	00e2      	lsls	r2, r4, #3
 80029ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029f0:	00d9      	lsls	r1, r3, #3
 80029f2:	460b      	mov	r3, r1
 80029f4:	4614      	mov	r4, r2
 80029f6:	195b      	adds	r3, r3, r5
 80029f8:	eb44 0406 	adc.w	r4, r4, r6
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	02a2      	lsls	r2, r4, #10
 8002a06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a0a:	0299      	lsls	r1, r3, #10
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4614      	mov	r4, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	4621      	mov	r1, r4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	f7fd fbf3 	bl	8000208 <__aeabi_uldivmod>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	60bb      	str	r3, [r7, #8]
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a46:	60bb      	str	r3, [r7, #8]
      break;
 8002a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4601      	mov	r1, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080040b8 	.word	0x080040b8

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff ffdc 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4601      	mov	r1, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080040b8 	.word	0x080040b8

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002af0:	4b69      	ldr	r3, [pc, #420]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a68      	ldr	r2, [pc, #416]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002afa:	6093      	str	r3, [r2, #8]
 8002afc:	4b66      	ldr	r3, [pc, #408]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	4964      	ldr	r1, [pc, #400]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d017      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	4959      	ldr	r1, [pc, #356]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b40:	d101      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d017      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	494a      	ldr	r1, [pc, #296]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 808b 	beq.w	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	4a39      	ldr	r2, [pc, #228]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe f96c 	bl	8000eac <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd8:	f7fe f968 	bl	8000eac <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e355      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d035      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d02e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d114      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f930 	bl	8000eac <HAL_GetTick>
 8002c4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe f92c 	bl	8000eac <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e317      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7e:	d111      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c8e:	400b      	ands	r3, r1
 8002c90:	4901      	ldr	r1, [pc, #4]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	0ffffcff 	.word	0x0ffffcff
 8002ca4:	4bb0      	ldr	r3, [pc, #704]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4aaf      	ldr	r2, [pc, #700]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002caa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cae:	6093      	str	r3, [r2, #8]
 8002cb0:	4bad      	ldr	r3, [pc, #692]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	49aa      	ldr	r1, [pc, #680]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cce:	4ba6      	ldr	r3, [pc, #664]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd4:	4aa4      	ldr	r2, [pc, #656]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cde:	4ba2      	ldr	r3, [pc, #648]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ce0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	499f      	ldr	r1, [pc, #636]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfc:	4b9a      	ldr	r3, [pc, #616]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0a:	4997      	ldr	r1, [pc, #604]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d1e:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d2c:	498e      	ldr	r1, [pc, #568]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d40:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4e:	4986      	ldr	r1, [pc, #536]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	497d      	ldr	r1, [pc, #500]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d84:	4b78      	ldr	r3, [pc, #480]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4975      	ldr	r1, [pc, #468]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da6:	4b70      	ldr	r3, [pc, #448]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	f023 020c 	bic.w	r2, r3, #12
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db4:	496c      	ldr	r1, [pc, #432]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc8:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	4964      	ldr	r1, [pc, #400]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	495b      	ldr	r1, [pc, #364]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e0c:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	4953      	ldr	r1, [pc, #332]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e2e:	4b4e      	ldr	r3, [pc, #312]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	494a      	ldr	r1, [pc, #296]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e50:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	4942      	ldr	r1, [pc, #264]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	4939      	ldr	r1, [pc, #228]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea2:	4931      	ldr	r1, [pc, #196]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec4:	4928      	ldr	r1, [pc, #160]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f04:	4918      	ldr	r1, [pc, #96]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f28:	490f      	ldr	r1, [pc, #60]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f3e:	f040 80d8 	bne.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4e:	f7fd ffad 	bl	8000eac <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f56:	f7fd ffa9 	bl	8000eac <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	; 0x64
 8002f62:	d903      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e196      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002f68:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d021      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	019a      	lsls	r2, r3, #6
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	071b      	lsls	r3, r3, #28
 8002fc0:	4957      	ldr	r1, [pc, #348]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d129      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff4:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003008:	0f1b      	lsrs	r3, r3, #28
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	019a      	lsls	r2, r3, #6
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	071b      	lsls	r3, r3, #28
 8003028:	493d      	ldr	r1, [pc, #244]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	f023 021f 	bic.w	r2, r3, #31
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	3b01      	subs	r3, #1
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01d      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	0e1b      	lsrs	r3, r3, #24
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	0f1b      	lsrs	r3, r3, #28
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	019a      	lsls	r2, r3, #6
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	071b      	lsls	r3, r3, #28
 8003088:	4925      	ldr	r1, [pc, #148]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d011      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	019a      	lsls	r2, r3, #6
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	071b      	lsls	r3, r3, #28
 80030b8:	4919      	ldr	r1, [pc, #100]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fd feee 	bl	8000eac <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030d4:	f7fd feea 	bl	8000eac <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0d7      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 80cd 	bne.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fd fed1 	bl	8000eac <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800310e:	f7fd fecd 	bl	8000eac <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d903      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0ba      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003120:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003130:	d0ed      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02e      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	0f1b      	lsrs	r3, r3, #28
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	019a      	lsls	r2, r3, #6
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	4944      	ldr	r1, [pc, #272]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	493d      	ldr	r1, [pc, #244]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c4:	d11d      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d028      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	019a      	lsls	r2, r3, #6
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	071b      	lsls	r3, r3, #28
 8003242:	4917      	ldr	r1, [pc, #92]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800324c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	4911      	ldr	r1, [pc, #68]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fd fe1e 	bl	8000eac <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003274:	f7fd fe1a 	bl	8000eac <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e007      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003292:	d1ef      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e040      	b.n	8003338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fc16 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f82c 	bl	8003340 <UART_SetConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fac4 	bl	8003888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fb4b 	bl	80039cc <UART_CheckIdleState>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4bb1      	ldr	r3, [pc, #708]	; (8003634 <UART_SetConfig+0x2f4>)
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	6939      	ldr	r1, [r7, #16]
 8003378:	430b      	orrs	r3, r1
 800337a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a9f      	ldr	r2, [pc, #636]	; (8003638 <UART_SetConfig+0x2f8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d121      	bne.n	8003404 <UART_SetConfig+0xc4>
 80033c0:	4b9e      	ldr	r3, [pc, #632]	; (800363c <UART_SetConfig+0x2fc>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d816      	bhi.n	80033fc <UART_SetConfig+0xbc>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <UART_SetConfig+0x94>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f1 	.word	0x080033f1
 80033dc:	080033eb 	.word	0x080033eb
 80033e0:	080033f7 	.word	0x080033f7
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e151      	b.n	800368e <UART_SetConfig+0x34e>
 80033ea:	2302      	movs	r3, #2
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	e14e      	b.n	800368e <UART_SetConfig+0x34e>
 80033f0:	2304      	movs	r3, #4
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e14b      	b.n	800368e <UART_SetConfig+0x34e>
 80033f6:	2308      	movs	r3, #8
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e148      	b.n	800368e <UART_SetConfig+0x34e>
 80033fc:	2310      	movs	r3, #16
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	bf00      	nop
 8003402:	e144      	b.n	800368e <UART_SetConfig+0x34e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a8d      	ldr	r2, [pc, #564]	; (8003640 <UART_SetConfig+0x300>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d134      	bne.n	8003478 <UART_SetConfig+0x138>
 800340e:	4b8b      	ldr	r3, [pc, #556]	; (800363c <UART_SetConfig+0x2fc>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d829      	bhi.n	8003470 <UART_SetConfig+0x130>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <UART_SetConfig+0xe4>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003459 	.word	0x08003459
 8003428:	08003471 	.word	0x08003471
 800342c:	08003471 	.word	0x08003471
 8003430:	08003471 	.word	0x08003471
 8003434:	08003465 	.word	0x08003465
 8003438:	08003471 	.word	0x08003471
 800343c:	08003471 	.word	0x08003471
 8003440:	08003471 	.word	0x08003471
 8003444:	0800345f 	.word	0x0800345f
 8003448:	08003471 	.word	0x08003471
 800344c:	08003471 	.word	0x08003471
 8003450:	08003471 	.word	0x08003471
 8003454:	0800346b 	.word	0x0800346b
 8003458:	2300      	movs	r3, #0
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e117      	b.n	800368e <UART_SetConfig+0x34e>
 800345e:	2302      	movs	r3, #2
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e114      	b.n	800368e <UART_SetConfig+0x34e>
 8003464:	2304      	movs	r3, #4
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e111      	b.n	800368e <UART_SetConfig+0x34e>
 800346a:	2308      	movs	r3, #8
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e10e      	b.n	800368e <UART_SetConfig+0x34e>
 8003470:	2310      	movs	r3, #16
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	bf00      	nop
 8003476:	e10a      	b.n	800368e <UART_SetConfig+0x34e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a71      	ldr	r2, [pc, #452]	; (8003644 <UART_SetConfig+0x304>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d120      	bne.n	80034c4 <UART_SetConfig+0x184>
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <UART_SetConfig+0x2fc>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800348c:	2b10      	cmp	r3, #16
 800348e:	d00f      	beq.n	80034b0 <UART_SetConfig+0x170>
 8003490:	2b10      	cmp	r3, #16
 8003492:	d802      	bhi.n	800349a <UART_SetConfig+0x15a>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <UART_SetConfig+0x164>
 8003498:	e010      	b.n	80034bc <UART_SetConfig+0x17c>
 800349a:	2b20      	cmp	r3, #32
 800349c:	d005      	beq.n	80034aa <UART_SetConfig+0x16a>
 800349e:	2b30      	cmp	r3, #48	; 0x30
 80034a0:	d009      	beq.n	80034b6 <UART_SetConfig+0x176>
 80034a2:	e00b      	b.n	80034bc <UART_SetConfig+0x17c>
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e0f1      	b.n	800368e <UART_SetConfig+0x34e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e0ee      	b.n	800368e <UART_SetConfig+0x34e>
 80034b0:	2304      	movs	r3, #4
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0eb      	b.n	800368e <UART_SetConfig+0x34e>
 80034b6:	2308      	movs	r3, #8
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e0e8      	b.n	800368e <UART_SetConfig+0x34e>
 80034bc:	2310      	movs	r3, #16
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	bf00      	nop
 80034c2:	e0e4      	b.n	800368e <UART_SetConfig+0x34e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5f      	ldr	r2, [pc, #380]	; (8003648 <UART_SetConfig+0x308>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d120      	bne.n	8003510 <UART_SetConfig+0x1d0>
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <UART_SetConfig+0x2fc>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d00f      	beq.n	80034fc <UART_SetConfig+0x1bc>
 80034dc:	2b40      	cmp	r3, #64	; 0x40
 80034de:	d802      	bhi.n	80034e6 <UART_SetConfig+0x1a6>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <UART_SetConfig+0x1b0>
 80034e4:	e010      	b.n	8003508 <UART_SetConfig+0x1c8>
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d005      	beq.n	80034f6 <UART_SetConfig+0x1b6>
 80034ea:	2bc0      	cmp	r3, #192	; 0xc0
 80034ec:	d009      	beq.n	8003502 <UART_SetConfig+0x1c2>
 80034ee:	e00b      	b.n	8003508 <UART_SetConfig+0x1c8>
 80034f0:	2300      	movs	r3, #0
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e0cb      	b.n	800368e <UART_SetConfig+0x34e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e0c8      	b.n	800368e <UART_SetConfig+0x34e>
 80034fc:	2304      	movs	r3, #4
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e0c5      	b.n	800368e <UART_SetConfig+0x34e>
 8003502:	2308      	movs	r3, #8
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e0c2      	b.n	800368e <UART_SetConfig+0x34e>
 8003508:	2310      	movs	r3, #16
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	bf00      	nop
 800350e:	e0be      	b.n	800368e <UART_SetConfig+0x34e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4d      	ldr	r2, [pc, #308]	; (800364c <UART_SetConfig+0x30c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d124      	bne.n	8003564 <UART_SetConfig+0x224>
 800351a:	4b48      	ldr	r3, [pc, #288]	; (800363c <UART_SetConfig+0x2fc>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003528:	d012      	beq.n	8003550 <UART_SetConfig+0x210>
 800352a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352e:	d802      	bhi.n	8003536 <UART_SetConfig+0x1f6>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <UART_SetConfig+0x204>
 8003534:	e012      	b.n	800355c <UART_SetConfig+0x21c>
 8003536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353a:	d006      	beq.n	800354a <UART_SetConfig+0x20a>
 800353c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003540:	d009      	beq.n	8003556 <UART_SetConfig+0x216>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x21c>
 8003544:	2300      	movs	r3, #0
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e0a1      	b.n	800368e <UART_SetConfig+0x34e>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e09e      	b.n	800368e <UART_SetConfig+0x34e>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e09b      	b.n	800368e <UART_SetConfig+0x34e>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e098      	b.n	800368e <UART_SetConfig+0x34e>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	bf00      	nop
 8003562:	e094      	b.n	800368e <UART_SetConfig+0x34e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a39      	ldr	r2, [pc, #228]	; (8003650 <UART_SetConfig+0x310>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d124      	bne.n	80035b8 <UART_SetConfig+0x278>
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <UART_SetConfig+0x2fc>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357c:	d012      	beq.n	80035a4 <UART_SetConfig+0x264>
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d802      	bhi.n	800358a <UART_SetConfig+0x24a>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <UART_SetConfig+0x258>
 8003588:	e012      	b.n	80035b0 <UART_SetConfig+0x270>
 800358a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358e:	d006      	beq.n	800359e <UART_SetConfig+0x25e>
 8003590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003594:	d009      	beq.n	80035aa <UART_SetConfig+0x26a>
 8003596:	e00b      	b.n	80035b0 <UART_SetConfig+0x270>
 8003598:	2301      	movs	r3, #1
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e077      	b.n	800368e <UART_SetConfig+0x34e>
 800359e:	2302      	movs	r3, #2
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e074      	b.n	800368e <UART_SetConfig+0x34e>
 80035a4:	2304      	movs	r3, #4
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e071      	b.n	800368e <UART_SetConfig+0x34e>
 80035aa:	2308      	movs	r3, #8
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e06e      	b.n	800368e <UART_SetConfig+0x34e>
 80035b0:	2310      	movs	r3, #16
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	bf00      	nop
 80035b6:	e06a      	b.n	800368e <UART_SetConfig+0x34e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a25      	ldr	r2, [pc, #148]	; (8003654 <UART_SetConfig+0x314>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d124      	bne.n	800360c <UART_SetConfig+0x2cc>
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <UART_SetConfig+0x2fc>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	d012      	beq.n	80035f8 <UART_SetConfig+0x2b8>
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d802      	bhi.n	80035de <UART_SetConfig+0x29e>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <UART_SetConfig+0x2ac>
 80035dc:	e012      	b.n	8003604 <UART_SetConfig+0x2c4>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e2:	d006      	beq.n	80035f2 <UART_SetConfig+0x2b2>
 80035e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035e8:	d009      	beq.n	80035fe <UART_SetConfig+0x2be>
 80035ea:	e00b      	b.n	8003604 <UART_SetConfig+0x2c4>
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e04d      	b.n	800368e <UART_SetConfig+0x34e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e04a      	b.n	800368e <UART_SetConfig+0x34e>
 80035f8:	2304      	movs	r3, #4
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e047      	b.n	800368e <UART_SetConfig+0x34e>
 80035fe:	2308      	movs	r3, #8
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e044      	b.n	800368e <UART_SetConfig+0x34e>
 8003604:	2310      	movs	r3, #16
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	bf00      	nop
 800360a:	e040      	b.n	800368e <UART_SetConfig+0x34e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <UART_SetConfig+0x318>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d139      	bne.n	800368a <UART_SetConfig+0x34a>
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <UART_SetConfig+0x2fc>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003624:	d027      	beq.n	8003676 <UART_SetConfig+0x336>
 8003626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362a:	d817      	bhi.n	800365c <UART_SetConfig+0x31c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01c      	beq.n	800366a <UART_SetConfig+0x32a>
 8003630:	e027      	b.n	8003682 <UART_SetConfig+0x342>
 8003632:	bf00      	nop
 8003634:	efff69f3 	.word	0xefff69f3
 8003638:	40011000 	.word	0x40011000
 800363c:	40023800 	.word	0x40023800
 8003640:	40004400 	.word	0x40004400
 8003644:	40004800 	.word	0x40004800
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
 8003650:	40011400 	.word	0x40011400
 8003654:	40007800 	.word	0x40007800
 8003658:	40007c00 	.word	0x40007c00
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003660:	d006      	beq.n	8003670 <UART_SetConfig+0x330>
 8003662:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003666:	d009      	beq.n	800367c <UART_SetConfig+0x33c>
 8003668:	e00b      	b.n	8003682 <UART_SetConfig+0x342>
 800366a:	2300      	movs	r3, #0
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e00e      	b.n	800368e <UART_SetConfig+0x34e>
 8003670:	2302      	movs	r3, #2
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e00b      	b.n	800368e <UART_SetConfig+0x34e>
 8003676:	2304      	movs	r3, #4
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e008      	b.n	800368e <UART_SetConfig+0x34e>
 800367c:	2308      	movs	r3, #8
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e005      	b.n	800368e <UART_SetConfig+0x34e>
 8003682:	2310      	movs	r3, #16
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	bf00      	nop
 8003688:	e001      	b.n	800368e <UART_SetConfig+0x34e>
 800368a:	2310      	movs	r3, #16
 800368c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003696:	d17c      	bne.n	8003792 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003698:	7ffb      	ldrb	r3, [r7, #31]
 800369a:	2b08      	cmp	r3, #8
 800369c:	d859      	bhi.n	8003752 <UART_SetConfig+0x412>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x364>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036e7 	.word	0x080036e7
 80036ac:	08003705 	.word	0x08003705
 80036b0:	08003753 	.word	0x08003753
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	08003753 	.word	0x08003753
 80036bc:	08003753 	.word	0x08003753
 80036c0:	08003753 	.word	0x08003753
 80036c4:	0800373b 	.word	0x0800373b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036c8:	f7ff f9d6 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 80036cc:	4603      	mov	r3, r0
 80036ce:	005a      	lsls	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	61bb      	str	r3, [r7, #24]
        break;
 80036e4:	e038      	b.n	8003758 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036e6:	f7ff f9db 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 80036ea:	4603      	mov	r3, r0
 80036ec:	005a      	lsls	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	61bb      	str	r3, [r7, #24]
        break;
 8003702:	e029      	b.n	8003758 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	085a      	lsrs	r2, r3, #1
 800370a:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <UART_SetConfig+0x540>)
 800370c:	4413      	add	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6852      	ldr	r2, [r2, #4]
 8003712:	fbb3 f3f2 	udiv	r3, r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	61bb      	str	r3, [r7, #24]
        break;
 800371a:	e01d      	b.n	8003758 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800371c:	f7ff f8c8 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8003720:	4603      	mov	r3, r0
 8003722:	005a      	lsls	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	441a      	add	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	61bb      	str	r3, [r7, #24]
        break;
 8003738:	e00e      	b.n	8003758 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	b29b      	uxth	r3, r3
 800374e:	61bb      	str	r3, [r7, #24]
        break;
 8003750:	e002      	b.n	8003758 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
        break;
 8003756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	d916      	bls.n	800378c <UART_SetConfig+0x44c>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d212      	bcs.n	800378c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f023 030f 	bic.w	r3, r3, #15
 800376e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	b29a      	uxth	r2, r3
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	4313      	orrs	r3, r2
 8003780:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	89fa      	ldrh	r2, [r7, #14]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	e06e      	b.n	800386a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
 8003790:	e06b      	b.n	800386a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d857      	bhi.n	8003848 <UART_SetConfig+0x508>
 8003798:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <UART_SetConfig+0x460>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037e1 	.word	0x080037e1
 80037a8:	080037fd 	.word	0x080037fd
 80037ac:	08003849 	.word	0x08003849
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003849 	.word	0x08003849
 80037b8:	08003849 	.word	0x08003849
 80037bc:	08003849 	.word	0x08003849
 80037c0:	08003831 	.word	0x08003831
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037c4:	f7ff f958 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	b29b      	uxth	r3, r3
 80037dc:	61bb      	str	r3, [r7, #24]
        break;
 80037de:	e036      	b.n	800384e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037e0:	f7ff f95e 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	61bb      	str	r3, [r7, #24]
        break;
 80037fa:	e028      	b.n	800384e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	085a      	lsrs	r2, r3, #1
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <UART_SetConfig+0x544>)
 8003804:	4413      	add	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6852      	ldr	r2, [r2, #4]
 800380a:	fbb3 f3f2 	udiv	r3, r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	61bb      	str	r3, [r7, #24]
        break;
 8003812:	e01c      	b.n	800384e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003814:	f7ff f84c 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e00e      	b.n	800384e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	b29b      	uxth	r3, r3
 8003844:	61bb      	str	r3, [r7, #24]
        break;
 8003846:	e002      	b.n	800384e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
        break;
 800384c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d908      	bls.n	8003866 <UART_SetConfig+0x526>
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d204      	bcs.n	8003866 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	e001      	b.n	800386a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	01e84800 	.word	0x01e84800
 8003884:	00f42400 	.word	0x00f42400

08003888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01a      	beq.n	800399e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003986:	d10a      	bne.n	800399e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039da:	f7fd fa67 	bl	8000eac <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d10e      	bne.n	8003a0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f814 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e00a      	b.n	8003a22 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3a:	e02a      	b.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d026      	beq.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fd fa32 	bl	8000eac <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11b      	bne.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e00f      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d0c5      	beq.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003abc:	b084      	sub	sp, #16
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	f107 001c 	add.w	r0, r7, #28
 8003aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d120      	bne.n	8003b16 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <USB_CoreInit+0xac>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa60 	bl	8003fd0 <USB_CoreReset>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e010      	b.n	8003b38 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa54 	bl	8003fd0 <USB_CoreReset>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d10b      	bne.n	8003b56 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f043 0206 	orr.w	r2, r3, #6
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b62:	b004      	add	sp, #16
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	ffbdffbf 	.word	0xffbdffbf

08003b6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 0201 	bic.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	e00b      	b.n	8003bd2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e001      	b.n	8003bd2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e003      	b.n	8003bda <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003bd2:	2032      	movs	r0, #50	; 0x32
 8003bd4:	f7fd f976 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e009      	b.n	8003c18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3340      	adds	r3, #64	; 0x40
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3301      	adds	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0e      	cmp	r3, #14
 8003c1c:	d9f2      	bls.n	8003c04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d112      	bne.n	8003c4a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e005      	b.n	8003c56 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c70:	461a      	mov	r2, r3
 8003c72:	680b      	ldr	r3, [r1, #0]
 8003c74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10c      	bne.n	8003c96 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c82:	2100      	movs	r1, #0
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f971 	bl	8003f6c <USB_SetDevSpeed>
 8003c8a:	e018      	b.n	8003cbe <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f96c 	bl	8003f6c <USB_SetDevSpeed>
 8003c94:	e013      	b.n	8003cbe <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d10c      	bne.n	8003cb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f961 	bl	8003f6c <USB_SetDevSpeed>
 8003caa:	e008      	b.n	8003cbe <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cac:	2101      	movs	r1, #1
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f95c 	bl	8003f6c <USB_SetDevSpeed>
 8003cb4:	e003      	b.n	8003cbe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f957 	bl	8003f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f90b 	bl	8003edc <USB_FlushTxFifo>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f929 	bl	8003f28 <USB_FlushRxFifo>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e043      	b.n	8003d92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d20:	d118      	bne.n	8003d54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	461a      	mov	r2, r3
 8003d36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e013      	b.n	8003d66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e008      	b.n	8003d66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	2300      	movs	r3, #0
 8003d64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	461a      	mov	r2, r3
 8003d74:	2300      	movs	r3, #0
 8003d76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3b7      	bcc.n	8003d0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e043      	b.n	8003e28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db6:	d118      	bne.n	8003dea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e013      	b.n	8003dfc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e008      	b.n	8003dfc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3301      	adds	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3b7      	bcc.n	8003da0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e42:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d110      	bne.n	8003e6c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <USB_DevInit+0x2e8>)
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	4619      	mov	r1, r3
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <USB_DevInit+0x2ec>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f043 0210 	orr.w	r2, r3, #16
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <USB_DevInit+0x2f0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f043 0208 	orr.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <USB_DevInit+0x2f4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ec8:	b004      	add	sp, #16
 8003eca:	4770      	bx	lr
 8003ecc:	00800100 	.word	0x00800100
 8003ed0:	00010003 	.word	0x00010003
 8003ed4:	803c3800 	.word	0x803c3800
 8003ed8:	40000004 	.word	0x40000004

08003edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <USB_FlushTxFifo+0x48>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d0f0      	beq.n	8003ef6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	00030d40 	.word	0x00030d40

08003f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2210      	movs	r2, #16
 8003f38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <USB_FlushRxFifo+0x40>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d0f0      	beq.n	8003f3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	00030d40 	.word	0x00030d40

08003f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	f7fc ff80 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <USB_CoreReset+0x64>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e01b      	b.n	8004026 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	daf2      	bge.n	8003fdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <USB_CoreReset+0x64>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e006      	b.n	8004026 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d0f0      	beq.n	8004006 <USB_CoreReset+0x36>

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	00030d40 	.word	0x00030d40

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4e0d      	ldr	r6, [pc, #52]	; (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 800403e:	1ba4      	subs	r4, r4, r6
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2500      	movs	r5, #0
 8004044:	42a5      	cmp	r5, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4e0b      	ldr	r6, [pc, #44]	; (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	; (800407c <__libc_init_array+0x44>)
 800404c:	f000 f820 	bl	8004090 <_init>
 8004050:	1ba4      	subs	r4, r4, r6
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2500      	movs	r5, #0
 8004056:	42a5      	cmp	r5, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004060:	4798      	blx	r3
 8004062:	3501      	adds	r5, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800406a:	4798      	blx	r3
 800406c:	3501      	adds	r5, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	080040d0 	.word	0x080040d0
 8004074:	080040d0 	.word	0x080040d0
 8004078:	080040d0 	.word	0x080040d0
 800407c:	080040d4 	.word	0x080040d4

08004080 <memset>:
 8004080:	4402      	add	r2, r0
 8004082:	4603      	mov	r3, r0
 8004084:	4293      	cmp	r3, r2
 8004086:	d100      	bne.n	800408a <memset+0xa>
 8004088:	4770      	bx	lr
 800408a:	f803 1b01 	strb.w	r1, [r3], #1
 800408e:	e7f9      	b.n	8004084 <memset+0x4>

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
