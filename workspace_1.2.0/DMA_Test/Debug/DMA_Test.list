
DMA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003774  08003774  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800377c  0800377c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000010  08003794  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08003794  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b023  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca3  00000000  00000000  0002b063  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002cd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024282  00000000  00000000  0002df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009018  00000000  00000000  000521f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dfe21  00000000  00000000  0005b20a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b02b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  0013b0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003744 	.word	0x08003744

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08003744 	.word	0x08003744

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc14 	bl	8000d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f835 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f989 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f93d 	bl	8000798 <MX_DMA_Init>
  MX_ADC1_Init();
 800051e:	f000 f8bb 	bl	8000698 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000522:	f000 f90b 	bl	800073c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t)&ledData[0], (uint32_t)&GPIOA->ODR,1);
 8000526:	4912      	ldr	r1, [pc, #72]	; (8000570 <main+0x68>)
 8000528:	2301      	movs	r3, #1
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <main+0x6c>)
 800052c:	4812      	ldr	r0, [pc, #72]	; (8000578 <main+0x70>)
 800052e:	f001 f889 	bl	8001644 <HAL_DMA_Start>
	  HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER,HAL_MAX_DELAY);
 8000532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000536:	2100      	movs	r1, #0
 8000538:	480f      	ldr	r0, [pc, #60]	; (8000578 <main+0x70>)
 800053a:	f001 f92e 	bl	800179a <HAL_DMA_PollForTransfer>

	  uint32_t currentTicks = HAL_GetTick();
 800053e:	f000 fc4d 	bl	8000ddc <HAL_GetTick>
 8000542:	6078      	str	r0, [r7, #4]
	  while((currentTicks + 1000) >= HAL_GetTick());
 8000544:	bf00      	nop
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 800054c:	f000 fc46 	bl	8000ddc <HAL_GetTick>
 8000550:	4603      	mov	r3, r0
 8000552:	429c      	cmp	r4, r3
 8000554:	d2f7      	bcs.n	8000546 <main+0x3e>

	  HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t)&ledData[1], (uint32_t)&GPIOA->ODR,1);
 8000556:	4909      	ldr	r1, [pc, #36]	; (800057c <main+0x74>)
 8000558:	2301      	movs	r3, #1
 800055a:	4a06      	ldr	r2, [pc, #24]	; (8000574 <main+0x6c>)
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0x70>)
 800055e:	f001 f871 	bl	8001644 <HAL_DMA_Start>
	  HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER,HAL_MAX_DELAY);
 8000562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000566:	2100      	movs	r1, #0
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <main+0x70>)
 800056a:	f001 f916 	bl	800179a <HAL_DMA_PollForTransfer>
  {
 800056e:	e7da      	b.n	8000526 <main+0x1e>
 8000570:	20000000 	.word	0x20000000
 8000574:	40020014 	.word	0x40020014
 8000578:	2000002c 	.word	0x2000002c
 800057c:	20000001 	.word	0x20000001

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0b4      	sub	sp, #208	; 0xd0
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 f8d0 	bl	8003734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2284      	movs	r2, #132	; 0x84
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 f8c1 	bl	8003734 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005b2:	f001 fdaf 	bl	8002114 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	4b36      	ldr	r3, [pc, #216]	; (8000690 <SystemClock_Config+0x110>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	4a35      	ldr	r2, [pc, #212]	; (8000690 <SystemClock_Config+0x110>)
 80005bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
 80005c2:	4b33      	ldr	r3, [pc, #204]	; (8000690 <SystemClock_Config+0x110>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <SystemClock_Config+0x114>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d6:	4a2f      	ldr	r2, [pc, #188]	; (8000694 <SystemClock_Config+0x114>)
 80005d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <SystemClock_Config+0x114>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000606:	2304      	movs	r3, #4
 8000608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800060c:	2348      	movs	r3, #72	; 0x48
 800060e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fd86 	bl	8002134 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800062e:	f000 fa3d 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f001 ffdb 	bl	8002614 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000664:	f000 fa22 	bl	8000aac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800066c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f98b 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000684:	f000 fa12 	bl	8000aac <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	37d0      	adds	r7, #208	; 0xd0
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <MX_ADC1_Init+0x9c>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_ADC1_Init+0x98>)
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_ADC1_Init+0xa0>)
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_ADC1_Init+0x98>)
 80006f8:	f000 fb9e 	bl	8000e38 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 f9d3 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000706:	2305      	movs	r3, #5
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2301      	movs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0x98>)
 8000718:	f000 fbd2 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000722:	f000 f9c3 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000490 	.word	0x20000490
 8000734:	40012000 	.word	0x40012000
 8000738:	0f000001 	.word	0x0f000001

0800073c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000746:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2206      	movs	r2, #6
 800074c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2202      	movs	r2, #2
 8000752:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2202      	movs	r2, #2
 800075e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2201      	movs	r2, #1
 8000764:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	f001 fb8b 	bl	8001e9a <HAL_PCD_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f98f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000008c 	.word	0x2000008c

08000798 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void) 
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_DMA_Init+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <MX_DMA_Init+0x88>)
 80007a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_DMA_Init+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_DMA_Init+0x8c>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <MX_DMA_Init+0x90>)
 80007ba:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_DMA_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_DMA_Init+0x8c>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_DMA_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_DMA_Init+0x8c>)
 80007d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_DMA_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_DMA_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_DMA_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_DMA_Init+0x8c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_DMA_Init+0x8c>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_DMA_Init+0x8c>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_DMA_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_DMA_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <MX_DMA_Init+0x8c>)
 8000808:	f000 fe6e 	bl	80014e8 <HAL_DMA_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 8000812:	f000 f94b 	bl	8000aac <Error_Handler>
  }

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	2000002c 	.word	0x2000002c
 8000828:	40026410 	.word	0x40026410

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b93      	ldr	r3, [pc, #588]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a92      	ldr	r2, [pc, #584]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b90      	ldr	r3, [pc, #576]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b8d      	ldr	r3, [pc, #564]	; (8000a90 <MX_GPIO_Init+0x264>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a8c      	ldr	r2, [pc, #560]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b8a      	ldr	r3, [pc, #552]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b87      	ldr	r3, [pc, #540]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a86      	ldr	r2, [pc, #536]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b84      	ldr	r3, [pc, #528]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b81      	ldr	r3, [pc, #516]	; (8000a90 <MX_GPIO_Init+0x264>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b7e      	ldr	r3, [pc, #504]	; (8000a90 <MX_GPIO_Init+0x264>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b7b      	ldr	r3, [pc, #492]	; (8000a90 <MX_GPIO_Init+0x264>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a7a      	ldr	r2, [pc, #488]	; (8000a90 <MX_GPIO_Init+0x264>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b78      	ldr	r3, [pc, #480]	; (8000a90 <MX_GPIO_Init+0x264>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ba:	4b75      	ldr	r3, [pc, #468]	; (8000a90 <MX_GPIO_Init+0x264>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a74      	ldr	r2, [pc, #464]	; (8000a90 <MX_GPIO_Init+0x264>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b72      	ldr	r3, [pc, #456]	; (8000a90 <MX_GPIO_Init+0x264>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d8:	486e      	ldr	r0, [pc, #440]	; (8000a94 <MX_GPIO_Init+0x268>)
 80008da:	f001 fac5 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	486d      	ldr	r0, [pc, #436]	; (8000a98 <MX_GPIO_Init+0x26c>)
 80008e4:	f001 fac0 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	486b      	ldr	r0, [pc, #428]	; (8000a9c <MX_GPIO_Init+0x270>)
 80008f0:	f001 faba 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <MX_GPIO_Init+0x274>)
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <MX_GPIO_Init+0x278>)
 800090a:	f001 f903 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800090e:	2332      	movs	r3, #50	; 0x32
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091e:	230b      	movs	r3, #11
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <MX_GPIO_Init+0x278>)
 800092a:	f001 f8f3 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 800092e:	2382      	movs	r3, #130	; 0x82
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093e:	230b      	movs	r3, #11
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4854      	ldr	r0, [pc, #336]	; (8000a9c <MX_GPIO_Init+0x270>)
 800094a:	f001 f8e3 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094e:	2304      	movs	r3, #4
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095e:	2307      	movs	r3, #7
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	484c      	ldr	r0, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x270>)
 800096a:	f001 f8d3 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800096e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4843      	ldr	r0, [pc, #268]	; (8000a94 <MX_GPIO_Init+0x268>)
 8000988:	f001 f8c4 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099e:	230b      	movs	r3, #11
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	483a      	ldr	r0, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x268>)
 80009aa:	f001 f8b3 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_TX_Pin;
 80009ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c0:	2307      	movs	r3, #7
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4837      	ldr	r0, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0x27c>)
 80009cc:	f001 f8a2 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	482c      	ldr	r0, [pc, #176]	; (8000a98 <MX_GPIO_Init+0x26c>)
 80009e8:	f001 f894 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <MX_GPIO_Init+0x26c>)
 8000a00:	f001 f888 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a16:	2307      	movs	r3, #7
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <MX_GPIO_Init+0x270>)
 8000a22:	f001 f877 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4817      	ldr	r0, [pc, #92]	; (8000a9c <MX_GPIO_Init+0x270>)
 8000a40:	f001 f868 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a56:	230b      	movs	r3, #11
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_GPIO_Init+0x26c>)
 8000a62:	f001 f857 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0x26c>)
 8000a84:	f001 f846 	bl	8001b14 <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x74>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d123      	bne.n	8000b6e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_ADC_MspInit+0x78>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_ADC_MspInit+0x78>)
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_ADC_MspInit+0x78>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_ADC_MspInit+0x78>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_ADC_MspInit+0x78>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_ADC_MspInit+0x78>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b56:	2320      	movs	r3, #32
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_ADC_MspInit+0x7c>)
 8000b6a:	f000 ffd3 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba4:	d134      	bne.n	8000c10 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bbe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4810      	ldr	r0, [pc, #64]	; (8000c1c <HAL_PCD_MspInit+0x98>)
 8000bdc:	f000 ff9a 	bl	8001b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be4:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bea:	6353      	str	r3, [r2, #52]	; 0x34
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6453      	str	r3, [r2, #68]	; 0x44
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_PCD_MspInit+0x94>)
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f89e 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <SystemInit+0x5c>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <SystemInit+0x5c>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <SystemInit+0x60>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <SystemInit+0x60>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SystemInit+0x60>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <SystemInit+0x60>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <SystemInit+0x60>)
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <SystemInit+0x64>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <SystemInit+0x60>)
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <SystemInit+0x68>)
 8000cb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <SystemInit+0x60>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <SystemInit+0x60>)
 8000cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x60>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x5c>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ccc:	609a      	str	r2, [r3, #8]
#endif
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	fef6ffff 	.word	0xfef6ffff
 8000ce4:	24003010 	.word	0x24003010

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cee:	e003      	b.n	8000cf8 <LoopCopyDataInit>

08000cf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cf6:	3104      	adds	r1, #4

08000cf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d00:	d3f6      	bcc.n	8000cf0 <CopyDataInit>
  ldr  r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d04:	e002      	b.n	8000d0c <LoopFillZerobss>

08000d06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d08:	f842 3b04 	str.w	r3, [r2], #4

08000d0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d10:	d3f9      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffb3 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f002 fce9 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fbf5 	bl	8000508 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000d24:	08003784 	.word	0x08003784
  ldr  r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d2c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d30:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d34:	200004dc 	.word	0x200004dc

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>

08000d3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f000 fb9e 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f805 	bl	8000d54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d4a:	f7ff feb7 	bl	8000abc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fbab 	bl	80014ce <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f000 fb81 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000004 	.word	0x20000004
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	200004d8 	.word	0x200004d8

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200004d8 	.word	0x200004d8

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e031      	b.n	8000eb2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d109      	bne.n	8000e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fe54 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_ADC_Init+0x84>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	f043 0202 	orr.w	r2, r3, #2
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f94e 	bl	8001128 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea2:	e001      	b.n	8000ea8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	ffffeefd 	.word	0xffffeefd

08000ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x1c>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e115      	b.n	8001108 <HAL_ADC_ConfigChannel+0x248>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d935      	bls.n	8000f58 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68d9      	ldr	r1, [r3, #12]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	3b1e      	subs	r3, #30
 8000f02:	2207      	movs	r2, #7
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	400a      	ands	r2, r1
 8000f10:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a7f      	ldr	r2, [pc, #508]	; (8001114 <HAL_ADC_ConfigChannel+0x254>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d10a      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	061a      	lsls	r2, r3, #24
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	e035      	b.n	8000f9e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68d9      	ldr	r1, [r3, #12]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	4603      	mov	r3, r0
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4403      	add	r3, r0
 8000f4a:	3b1e      	subs	r3, #30
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	e022      	b.n	8000f9e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6919      	ldr	r1, [r3, #16]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	400a      	ands	r2, r1
 8000f7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6919      	ldr	r1, [r3, #16]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4403      	add	r3, r0
 8000f94:	409a      	lsls	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d824      	bhi.n	8000ff0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b05      	subs	r3, #5
 8000fb8:	221f      	movs	r2, #31
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b05      	subs	r3, #5
 8000fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
 8000fee:	e04c      	b.n	800108a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b0c      	cmp	r3, #12
 8000ff6:	d824      	bhi.n	8001042 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	3b23      	subs	r3, #35	; 0x23
 800100a:	221f      	movs	r2, #31
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43da      	mvns	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	400a      	ands	r2, r1
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	3b23      	subs	r3, #35	; 0x23
 8001034:	fa00 f203 	lsl.w	r2, r0, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
 8001040:	e023      	b.n	800108a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	3b41      	subs	r3, #65	; 0x41
 8001054:	221f      	movs	r2, #31
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	400a      	ands	r2, r1
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	3b41      	subs	r3, #65	; 0x41
 800107e:	fa00 f203 	lsl.w	r2, r0, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_ADC_ConfigChannel+0x258>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d109      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x1e8>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b12      	cmp	r3, #18
 800109a:	d105      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_ADC_ConfigChannel+0x25c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a1e      	ldr	r2, [pc, #120]	; (800111c <HAL_ADC_ConfigChannel+0x25c>)
 80010a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_ADC_ConfigChannel+0x258>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d125      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x23e>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_ADC_ConfigChannel+0x254>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d003      	beq.n	80010c4 <HAL_ADC_ConfigChannel+0x204>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b11      	cmp	r3, #17
 80010c2:	d11c      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_ADC_ConfigChannel+0x25c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_ADC_ConfigChannel+0x25c>)
 80010ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010ce:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_ADC_ConfigChannel+0x254>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d111      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_ADC_ConfigChannel+0x260>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_ADC_ConfigChannel+0x264>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9a      	lsrs	r2, r3, #18
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80010f0:	e002      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f9      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	10000012 	.word	0x10000012
 8001118:	40012000 	.word	0x40012000
 800111c:	40012300 	.word	0x40012300
 8001120:	20000004 	.word	0x20000004
 8001124:	431bde83 	.word	0x431bde83

08001128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001130:	4b78      	ldr	r3, [pc, #480]	; (8001314 <ADC_Init+0x1ec>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a77      	ldr	r2, [pc, #476]	; (8001314 <ADC_Init+0x1ec>)
 8001136:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800113a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <ADC_Init+0x1ec>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4973      	ldr	r1, [pc, #460]	; (8001314 <ADC_Init+0x1ec>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	021a      	lsls	r2, r3, #8
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800117c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800119e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6899      	ldr	r1, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	4a58      	ldr	r2, [pc, #352]	; (8001318 <ADC_Init+0x1f0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d022      	beq.n	8001202 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6899      	ldr	r1, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6899      	ldr	r1, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	e00f      	b.n	8001222 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001220:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0202 	bic.w	r2, r2, #2
 8001230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6899      	ldr	r1, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	005a      	lsls	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01b      	beq.n	8001288 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800125e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800126e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6859      	ldr	r1, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	3b01      	subs	r3, #1
 800127c:	035a      	lsls	r2, r3, #13
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	e007      	b.n	8001298 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001296:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	051a      	lsls	r2, r3, #20
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6899      	ldr	r1, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012da:	025a      	lsls	r2, r3, #9
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6899      	ldr	r1, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	029a      	lsls	r2, r3, #10
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40012300 	.word	0x40012300
 8001318:	0f000001 	.word	0x0f000001

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	4313      	orrs	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	05fa0000 	.word	0x05fa0000

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff47 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff5c 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffb0 	bl	800143c <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff fc72 	bl	8000ddc <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e099      	b.n	8001638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2202      	movs	r2, #2
 8001510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001524:	e00f      	b.n	8001546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001526:	f7ff fc59 	bl	8000ddc <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b05      	cmp	r3, #5
 8001532:	d908      	bls.n	8001546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e078      	b.n	8001638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e8      	bne.n	8001526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_DMA_Init+0x158>)
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	2b04      	cmp	r3, #4
 800159e:	d107      	bne.n	80015b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4313      	orrs	r3, r2
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d117      	bne.n	800160a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00e      	beq.n	800160a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fa17 	bl	8001a20 <DMA_CheckFifoParam>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001606:	2301      	movs	r3, #1
 8001608:	e016      	b.n	8001638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f9ce 	bl	80019b4 <DMA_CalcBaseAndBitshift>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	223f      	movs	r2, #63	; 0x3f
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	f010803f 	.word	0xf010803f

08001644 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_DMA_Start+0x20>
 8001660:	2302      	movs	r3, #2
 8001662:	e026      	b.n	80016b2 <HAL_DMA_Start+0x6e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d115      	bne.n	80016a4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f963 	bl	8001958 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e005      	b.n	80016b0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
 80016ae:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fb88 	bl	8000ddc <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d008      	beq.n	80016ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e052      	b.n	8001792 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0216 	bic.w	r2, r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_DMA_Abort+0x62>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0208 	bic.w	r2, r2, #8
 800172a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	e013      	b.n	8001766 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173e:	f7ff fb4d 	bl	8000ddc <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b05      	cmp	r3, #5
 800174a:	d90c      	bls.n	8001766 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e015      	b.n	8001792 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e4      	bne.n	800173e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	223f      	movs	r2, #63	; 0x3f
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b08a      	sub	sp, #40	; 0x28
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	460b      	mov	r3, r1
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80017ac:	f7ff fb16 	bl	8000ddc <HAL_GetTick>
 80017b0:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d008      	beq.n	80017d0 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0bf      	b.n	8001950 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0b2      	b.n	8001950 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	2220      	movs	r2, #32
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
 80017fc:	e005      	b.n	800180a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	2210      	movs	r2, #16
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001816:	e05a      	b.n	80018ce <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181e:	d017      	beq.n	8001850 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_DMA_PollForTransfer+0x9c>
 8001826:	f7ff fad9 	bl	8000ddc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20c      	bcs.n	8001850 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e07f      	b.n	8001950 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2208      	movs	r2, #8
 800185c:	409a      	lsls	r2, r3
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	2208      	movs	r2, #8
 8001878:	409a      	lsls	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0202 	orr.w	r2, r3, #2
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2201      	movs	r2, #1
 80018a0:	409a      	lsls	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018aa:	2204      	movs	r2, #4
 80018ac:	409a      	lsls	r2, r3
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	f043 0204 	orr.w	r2, r3, #4
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	2204      	movs	r2, #4
 80018c8:	409a      	lsls	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_DMA_PollForTransfer+0x14a>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d099      	beq.n	8001818 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d018      	beq.n	800191e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d012      	beq.n	800191e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff fede 	bl	80016ba <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2230      	movs	r2, #48	; 0x30
 8001904:	409a      	lsls	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e018      	b.n	8001950 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10e      	bne.n	8001942 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2230      	movs	r2, #48	; 0x30
 800192a:	409a      	lsls	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001940:	e005      	b.n	800194e <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer flag */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	2210      	movs	r2, #16
 8001948:	409a      	lsls	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800194e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001974:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b40      	cmp	r3, #64	; 0x40
 8001984:	d108      	bne.n	8001998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001996:	e007      	b.n	80019a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3b10      	subs	r3, #16
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <DMA_CalcBaseAndBitshift+0x60>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <DMA_CalcBaseAndBitshift+0x64>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d908      	bls.n	80019f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <DMA_CalcBaseAndBitshift+0x68>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	1d1a      	adds	r2, r3, #4
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	659a      	str	r2, [r3, #88]	; 0x58
 80019f2:	e006      	b.n	8001a02 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <DMA_CalcBaseAndBitshift+0x68>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	aaaaaaab 	.word	0xaaaaaaab
 8001a18:	0800376c 	.word	0x0800376c
 8001a1c:	fffffc00 	.word	0xfffffc00

08001a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11f      	bne.n	8001a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d855      	bhi.n	8001aec <DMA_CheckFifoParam+0xcc>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <DMA_CheckFifoParam+0x28>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a59 	.word	0x08001a59
 8001a4c:	08001a6b 	.word	0x08001a6b
 8001a50:	08001a59 	.word	0x08001a59
 8001a54:	08001aed 	.word	0x08001aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d045      	beq.n	8001af0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a68:	e042      	b.n	8001af0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a72:	d13f      	bne.n	8001af4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a78:	e03c      	b.n	8001af4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a82:	d121      	bne.n	8001ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d836      	bhi.n	8001af8 <DMA_CheckFifoParam+0xd8>
 8001a8a:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <DMA_CheckFifoParam+0x70>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001aa1 	.word	0x08001aa1
 8001a94:	08001aa7 	.word	0x08001aa7
 8001a98:	08001aa1 	.word	0x08001aa1
 8001a9c:	08001ab9 	.word	0x08001ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa4:	e02f      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d024      	beq.n	8001afc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab6:	e021      	b.n	8001afc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ac0:	d11e      	bne.n	8001b00 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ac6:	e01b      	b.n	8001b00 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <DMA_CheckFifoParam+0xb4>
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d003      	beq.n	8001ada <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ad2:	e018      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad8:	e015      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8001aea:	e00b      	b.n	8001b04 <DMA_CheckFifoParam+0xe4>
      break;
 8001aec:	bf00      	nop
 8001aee:	e00a      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;
 8001af0:	bf00      	nop
 8001af2:	e008      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;
 8001af4:	bf00      	nop
 8001af6:	e006      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;
 8001af8:	bf00      	nop
 8001afa:	e004      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;
 8001afc:	bf00      	nop
 8001afe:	e002      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;   
 8001b00:	bf00      	nop
 8001b02:	e000      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;
 8001b04:	bf00      	nop
    }
  } 
  
  return status; 
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e175      	b.n	8001e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8164 	bne.w	8001e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x4e>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d123      	bne.n	8001baa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0203 	and.w	r2, r3, #3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00b      	beq.n	8001bfe <HAL_GPIO_Init+0xea>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf2:	2b11      	cmp	r3, #17
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d130      	bne.n	8001c60 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80be 	beq.w	8001e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cb6:	4a60      	ldr	r2, [pc, #384]	; (8001e38 <HAL_GPIO_Init+0x324>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_GPIO_Init+0x328>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d037      	beq.n	8001d52 <HAL_GPIO_Init+0x23e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_GPIO_Init+0x32c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_GPIO_Init+0x23a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a55      	ldr	r2, [pc, #340]	; (8001e44 <HAL_GPIO_Init+0x330>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x236>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a54      	ldr	r2, [pc, #336]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x232>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a53      	ldr	r2, [pc, #332]	; (8001e4c <HAL_GPIO_Init+0x338>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x22e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_GPIO_Init+0x33c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x22a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x340>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_GPIO_Init+0x344>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x348>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x34c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x21a>
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	e012      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d2e:	230a      	movs	r3, #10
 8001d30:	e010      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d32:	2308      	movs	r3, #8
 8001d34:	e00e      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d64:	4934      	ldr	r1, [pc, #208]	; (8001e38 <HAL_GPIO_Init+0x324>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc0:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_GPIO_Init+0x350>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae86 	bls.w	8001b34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3724      	adds	r7, #36	; 0x24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40021400 	.word	0x40021400
 8001e54:	40021800 	.word	0x40021800
 8001e58:	40021c00 	.word	0x40021c00
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40022400 	.word	0x40022400
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9c:	b08f      	sub	sp, #60	; 0x3c
 8001e9e:	af0a      	add	r7, sp, #40	; 0x28
 8001ea0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e10a      	b.n	80020c2 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d106      	bne.n	8001ec6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7fe fe5f 	bl	8000b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 f9a4 	bl	8003220 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	687e      	ldr	r6, [r7, #4]
 8001ee0:	466d      	mov	r5, sp
 8001ee2:	f106 0410 	add.w	r4, r6, #16
 8001ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef6:	1d33      	adds	r3, r6, #4
 8001ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f001 f938 	bl	8003170 <USB_CoreInit>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0d7      	b.n	80020c2 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 f992 	bl	8003242 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e04a      	b.n	8001fba <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	333d      	adds	r3, #61	; 0x3d
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	333c      	adds	r3, #60	; 0x3c
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	b298      	uxth	r0, r3
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3342      	adds	r3, #66	; 0x42
 8001f60:	4602      	mov	r2, r0
 8001f62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	333f      	adds	r3, #63	; 0x3f
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3344      	adds	r3, #68	; 0x44
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3348      	adds	r3, #72	; 0x48
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3350      	adds	r3, #80	; 0x50
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3af      	bcc.n	8001f24 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e044      	b.n	8002054 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	3301      	adds	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d3b5      	bcc.n	8001fca <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	687e      	ldr	r6, [r7, #4]
 8002066:	466d      	mov	r5, sp
 8002068:	f106 0410 	add.w	r4, r6, #16
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002078:	e885 0003 	stmia.w	r5, {r0, r1}
 800207c:	1d33      	adds	r3, r6, #4
 800207e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002080:	6838      	ldr	r0, [r7, #0]
 8002082:	f001 f909 	bl	8003298 <USB_DevInit>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e014      	b.n	80020c2 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f80b 	bl	80020cc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fac9 	bl	8003652 <USB_DevDisconnect>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_PCDEx_ActivateLPM+0x44>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	10000003 	.word	0x10000003

08002114 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40007000 	.word	0x40007000

08002134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e25c      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8087 	beq.w	8002266 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002158:	4b96      	ldr	r3, [pc, #600]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b04      	cmp	r3, #4
 8002162:	d00c      	beq.n	800217e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002164:	4b93      	ldr	r3, [pc, #588]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d112      	bne.n	8002196 <HAL_RCC_OscConfig+0x62>
 8002170:	4b90      	ldr	r3, [pc, #576]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217c:	d10b      	bne.n	8002196 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217e:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d06c      	beq.n	8002264 <HAL_RCC_OscConfig+0x130>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d168      	bne.n	8002264 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e236      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x7a>
 80021a0:	4b84      	ldr	r3, [pc, #528]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a83      	ldr	r2, [pc, #524]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e02e      	b.n	800220c <HAL_RCC_OscConfig+0xd8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x9c>
 80021b6:	4b7f      	ldr	r3, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7e      	ldr	r2, [pc, #504]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b7c      	ldr	r3, [pc, #496]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7b      	ldr	r2, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e01d      	b.n	800220c <HAL_RCC_OscConfig+0xd8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0xc0>
 80021da:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a75      	ldr	r2, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b73      	ldr	r3, [pc, #460]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a72      	ldr	r2, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0xd8>
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6b      	ldr	r2, [pc, #428]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fde2 	bl	8000ddc <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe fdde 	bl	8000ddc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1ea      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0xe8>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fdce 	bl	8000ddc <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fdca 	bl	8000ddc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1d6      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x110>
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d069      	beq.n	8002346 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002272:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b08      	cmp	r3, #8
 8002288:	d11c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x190>
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d116      	bne.n	80022c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x17a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e1aa      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	e040      	b.n	8002346 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d023      	beq.n	8002314 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fd80 	bl	8000ddc <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe fd7c 	bl	8000ddc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e188      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4929      	ldr	r1, [pc, #164]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
 8002312:	e018      	b.n	8002346 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fd5c 	bl	8000ddc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002328:	f7fe fd58 	bl	8000ddc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e164      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d038      	beq.n	80023c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d019      	beq.n	800238e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 800235c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fe fd39 	bl	8000ddc <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe fd35 	bl	8000ddc <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e141      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x23a>
 800238c:	e01a      	b.n	80023c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_RCC_OscConfig+0x280>)
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7fe fd1f 	bl	8000ddc <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe fd1b 	bl	8000ddc <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d903      	bls.n	80023b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e127      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
 80023b4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b94      	ldr	r3, [pc, #592]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a4 	beq.w	800251a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b8e      	ldr	r3, [pc, #568]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a8a      	ldr	r2, [pc, #552]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x4dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a81      	ldr	r2, [pc, #516]	; (8002610 <HAL_RCC_OscConfig+0x4dc>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7fe fce3 	bl	8000ddc <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800241a:	f7fe fcdf 	bl	8000ddc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b64      	cmp	r3, #100	; 0x64
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0eb      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242c:	4b78      	ldr	r3, [pc, #480]	; (8002610 <HAL_RCC_OscConfig+0x4dc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x31a>
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a71      	ldr	r2, [pc, #452]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	e02d      	b.n	80024aa <HAL_RCC_OscConfig+0x376>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x33c>
 8002456:	4b6d      	ldr	r3, [pc, #436]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a6c      	ldr	r2, [pc, #432]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
 8002462:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	e01c      	b.n	80024aa <HAL_RCC_OscConfig+0x376>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x35e>
 8002478:	4b64      	ldr	r3, [pc, #400]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a63      	ldr	r2, [pc, #396]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	4b61      	ldr	r3, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a60      	ldr	r2, [pc, #384]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	e00b      	b.n	80024aa <HAL_RCC_OscConfig+0x376>
 8002492:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a5a      	ldr	r2, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d015      	beq.n	80024de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7fe fc93 	bl	8000ddc <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fc8f 	bl	8000ddc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e099      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ee      	beq.n	80024ba <HAL_RCC_OscConfig+0x386>
 80024dc:	e014      	b.n	8002508 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fc7d 	bl	8000ddc <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fc79 	bl	8000ddc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e083      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ee      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a3e      	ldr	r2, [pc, #248]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06f      	beq.n	8002602 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002522:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d067      	beq.n	80025fe <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d149      	bne.n	80025ca <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a34      	ldr	r2, [pc, #208]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800253c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fc4b 	bl	8000ddc <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fc47 	bl	8000ddc <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e053      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255c:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	019b      	lsls	r3, r3, #6
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	3b01      	subs	r3, #1
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	4313      	orrs	r3, r2
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002590:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002594:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 800259c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fc1b 	bl	8000ddc <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fc17 	bl	8000ddc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e023      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x476>
 80025c8:	e01b      	b.n	8002602 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fc01 	bl	8000ddc <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fbfd 	bl	8000ddc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e009      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x4aa>
 80025fc:	e001      	b.n	8002602 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0ce      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	4964      	ldr	r1, [pc, #400]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b62      	ldr	r3, [pc, #392]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b6      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494c      	ldr	r1, [pc, #304]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d040      	beq.n	8002738 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07d      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e071      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e069      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4935      	ldr	r1, [pc, #212]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7fe fb68 	bl	8000ddc <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe fb64 	bl	8000ddc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e051      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d210      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	4921      	ldr	r1, [pc, #132]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e030      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4915      	ldr	r1, [pc, #84]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490d      	ldr	r1, [pc, #52]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f81d 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	fa21 f303 	lsr.w	r3, r1, r3
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_RCC_ClockConfig+0x1cc>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe fac6 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	0800375c 	.word	0x0800375c
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	2300      	movs	r3, #0
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d007      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x32>
 8002806:	2b08      	cmp	r3, #8
 8002808:	d008      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x38>
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 80b4 	bne.w	8002978 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002812:	60bb      	str	r3, [r7, #8]
       break;
 8002814:	e0b3      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002818:	60bb      	str	r3, [r7, #8]
      break;
 800281a:	e0b0      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281c:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002826:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04a      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002832:	4b55      	ldr	r3, [pc, #340]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	099b      	lsrs	r3, r3, #6
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	ea03 0501 	and.w	r5, r3, r1
 8002848:	ea04 0602 	and.w	r6, r4, r2
 800284c:	4629      	mov	r1, r5
 800284e:	4632      	mov	r2, r6
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	f04f 0400 	mov.w	r4, #0
 8002858:	0154      	lsls	r4, r2, #5
 800285a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800285e:	014b      	lsls	r3, r1, #5
 8002860:	4619      	mov	r1, r3
 8002862:	4622      	mov	r2, r4
 8002864:	1b49      	subs	r1, r1, r5
 8002866:	eb62 0206 	sbc.w	r2, r2, r6
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	f04f 0400 	mov.w	r4, #0
 8002872:	0194      	lsls	r4, r2, #6
 8002874:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002878:	018b      	lsls	r3, r1, #6
 800287a:	1a5b      	subs	r3, r3, r1
 800287c:	eb64 0402 	sbc.w	r4, r4, r2
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	00e2      	lsls	r2, r4, #3
 800288a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800288e:	00d9      	lsls	r1, r3, #3
 8002890:	460b      	mov	r3, r1
 8002892:	4614      	mov	r4, r2
 8002894:	195b      	adds	r3, r3, r5
 8002896:	eb44 0406 	adc.w	r4, r4, r6
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	0262      	lsls	r2, r4, #9
 80028a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028a8:	0259      	lsls	r1, r3, #9
 80028aa:	460b      	mov	r3, r1
 80028ac:	4614      	mov	r4, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	4621      	mov	r1, r4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f04f 0400 	mov.w	r4, #0
 80028b8:	461a      	mov	r2, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	f7fd fca4 	bl	8000208 <__aeabi_uldivmod>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e049      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c8:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	ea03 0501 	and.w	r5, r3, r1
 80028de:	ea04 0602 	and.w	r6, r4, r2
 80028e2:	4629      	mov	r1, r5
 80028e4:	4632      	mov	r2, r6
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	f04f 0400 	mov.w	r4, #0
 80028ee:	0154      	lsls	r4, r2, #5
 80028f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f4:	014b      	lsls	r3, r1, #5
 80028f6:	4619      	mov	r1, r3
 80028f8:	4622      	mov	r2, r4
 80028fa:	1b49      	subs	r1, r1, r5
 80028fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	0194      	lsls	r4, r2, #6
 800290a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800290e:	018b      	lsls	r3, r1, #6
 8002910:	1a5b      	subs	r3, r3, r1
 8002912:	eb64 0402 	sbc.w	r4, r4, r2
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	00e2      	lsls	r2, r4, #3
 8002920:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002924:	00d9      	lsls	r1, r3, #3
 8002926:	460b      	mov	r3, r1
 8002928:	4614      	mov	r4, r2
 800292a:	195b      	adds	r3, r3, r5
 800292c:	eb44 0406 	adc.w	r4, r4, r6
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	02a2      	lsls	r2, r4, #10
 800293a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800293e:	0299      	lsls	r1, r3, #10
 8002940:	460b      	mov	r3, r1
 8002942:	4614      	mov	r4, r2
 8002944:	4618      	mov	r0, r3
 8002946:	4621      	mov	r1, r4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f04f 0400 	mov.w	r4, #0
 800294e:	461a      	mov	r2, r3
 8002950:	4623      	mov	r3, r4
 8002952:	f7fd fc59 	bl	8000208 <__aeabi_uldivmod>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	60bb      	str	r3, [r7, #8]
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800297a:	60bb      	str	r3, [r7, #8]
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	68bb      	ldr	r3, [r7, #8]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	00f42400 	.word	0x00f42400
 8002990:	007a1200 	.word	0x007a1200

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029bc:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a68      	ldr	r2, [pc, #416]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029c6:	6093      	str	r3, [r2, #8]
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	4964      	ldr	r1, [pc, #400]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d017      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	4959      	ldr	r1, [pc, #356]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d017      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	494a      	ldr	r1, [pc, #296]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a48:	d101      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 808b 	beq.w	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	4a39      	ldr	r2, [pc, #228]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6413      	str	r3, [r2, #64]	; 0x40
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a90:	4b35      	ldr	r3, [pc, #212]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe f99e 	bl	8000ddc <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa4:	f7fe f99a 	bl	8000ddc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e355      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d035      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d02e      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d114      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe f962 	bl	8000ddc <HAL_GetTick>
 8002b18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f95e 	bl	8000ddc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e317      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ee      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4a:	d111      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b5a:	400b      	ands	r3, r1
 8002b5c:	4901      	ldr	r1, [pc, #4]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	0ffffcff 	.word	0x0ffffcff
 8002b70:	4bb0      	ldr	r3, [pc, #704]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4aaf      	ldr	r2, [pc, #700]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b7a:	6093      	str	r3, [r2, #8]
 8002b7c:	4bad      	ldr	r3, [pc, #692]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	49aa      	ldr	r1, [pc, #680]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b9a:	4ba6      	ldr	r3, [pc, #664]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba0:	4aa4      	ldr	r2, [pc, #656]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002baa:	4ba2      	ldr	r3, [pc, #648]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	499f      	ldr	r1, [pc, #636]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc8:	4b9a      	ldr	r3, [pc, #616]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd6:	4997      	ldr	r1, [pc, #604]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bea:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf8:	498e      	ldr	r1, [pc, #568]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c0c:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1a:	4986      	ldr	r1, [pc, #536]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c2e:	4b81      	ldr	r3, [pc, #516]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	497d      	ldr	r1, [pc, #500]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c50:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4975      	ldr	r1, [pc, #468]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c72:	4b70      	ldr	r3, [pc, #448]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f023 020c 	bic.w	r2, r3, #12
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	496c      	ldr	r1, [pc, #432]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c94:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	4964      	ldr	r1, [pc, #400]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	495b      	ldr	r1, [pc, #364]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd8:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	4953      	ldr	r1, [pc, #332]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	494a      	ldr	r1, [pc, #296]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d1c:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	4942      	ldr	r1, [pc, #264]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	4939      	ldr	r1, [pc, #228]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6e:	4931      	ldr	r1, [pc, #196]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d011      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d90:	4928      	ldr	r1, [pc, #160]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	4918      	ldr	r1, [pc, #96]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df4:	490f      	ldr	r1, [pc, #60]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d005      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e0a:	f040 80d8 	bne.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1a:	f7fd ffdf 	bl	8000ddc <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e22:	f7fd ffdb 	bl	8000ddc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b64      	cmp	r3, #100	; 0x64
 8002e2e:	d903      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e196      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002e34:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e38:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d11d      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	019a      	lsls	r2, r3, #6
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	071b      	lsls	r3, r3, #28
 8002e8c:	4957      	ldr	r1, [pc, #348]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d02e      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ebe:	d129      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	0f1b      	lsrs	r3, r3, #28
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	019a      	lsls	r2, r3, #6
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	071b      	lsls	r3, r3, #28
 8002ef4:	493d      	ldr	r1, [pc, #244]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f02:	f023 021f 	bic.w	r2, r3, #31
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	4937      	ldr	r1, [pc, #220]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01d      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f26:	0e1b      	lsrs	r3, r3, #24
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	0f1b      	lsrs	r3, r3, #28
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	019a      	lsls	r2, r3, #6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	071b      	lsls	r3, r3, #28
 8002f54:	4925      	ldr	r1, [pc, #148]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	019a      	lsls	r2, r3, #6
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	071b      	lsls	r3, r3, #28
 8002f84:	4919      	ldr	r1, [pc, #100]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fd ff20 	bl	8000ddc <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa0:	f7fd ff1c 	bl	8000ddc <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0d7      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 80cd 	bne.w	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fd ff03 	bl	8000ddc <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fda:	f7fd feff 	bl	8000ddc <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d903      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0ba      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002fec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d0ed      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02e      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d12a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	0f1b      	lsrs	r3, r3, #28
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	019a      	lsls	r2, r3, #6
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	071b      	lsls	r3, r3, #28
 800305a:	4944      	ldr	r1, [pc, #272]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003062:	4b42      	ldr	r3, [pc, #264]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	493d      	ldr	r1, [pc, #244]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d022      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003090:	d11d      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	0e1b      	lsrs	r3, r3, #24
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	0f1b      	lsrs	r3, r3, #28
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	019a      	lsls	r2, r3, #6
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	4929      	ldr	r1, [pc, #164]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d028      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	0e1b      	lsrs	r3, r3, #24
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	019a      	lsls	r2, r3, #6
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	071b      	lsls	r3, r3, #28
 800310e:	4917      	ldr	r1, [pc, #92]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4911      	ldr	r1, [pc, #68]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0e      	ldr	r2, [pc, #56]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fd fe50 	bl	8000ddc <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003140:	f7fd fe4c 	bl	8000ddc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e007      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800315a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315e:	d1ef      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003170:	b084      	sub	sp, #16
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	f107 001c 	add.w	r0, r7, #28
 800317e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2b01      	cmp	r3, #1
 8003186:	d120      	bne.n	80031ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	4b20      	ldr	r3, [pc, #128]	; (800321c <USB_CoreInit+0xac>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d105      	bne.n	80031be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa60 	bl	8003684 <USB_CoreReset>
 80031c4:	4603      	mov	r3, r0
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e010      	b.n	80031ec <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa54 	bl	8003684 <USB_CoreReset>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10b      	bne.n	800320a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f043 0206 	orr.w	r2, r3, #6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003216:	b004      	add	sp, #16
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	ffbdffbf 	.word	0xffbdffbf

08003220 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 0201 	bic.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	e00b      	b.n	8003286 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	e001      	b.n	8003286 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e003      	b.n	800328e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003286:	2032      	movs	r0, #50	; 0x32
 8003288:	f7fd fdb4 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003298:	b084      	sub	sp, #16
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e009      	b.n	80032cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3340      	adds	r3, #64	; 0x40
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3301      	adds	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0e      	cmp	r3, #14
 80032d0:	d9f2      	bls.n	80032b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d112      	bne.n	80032fe <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e005      	b.n	800330a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003310:	461a      	mov	r2, r3
 8003312:	2300      	movs	r3, #0
 8003314:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	4619      	mov	r1, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	461a      	mov	r2, r3
 8003326:	680b      	ldr	r3, [r1, #0]
 8003328:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10c      	bne.n	800334a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003336:	2100      	movs	r1, #0
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f971 	bl	8003620 <USB_SetDevSpeed>
 800333e:	e018      	b.n	8003372 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003340:	2101      	movs	r1, #1
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f96c 	bl	8003620 <USB_SetDevSpeed>
 8003348:	e013      	b.n	8003372 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	2b03      	cmp	r3, #3
 800334e:	d10c      	bne.n	800336a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003356:	2100      	movs	r1, #0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f961 	bl	8003620 <USB_SetDevSpeed>
 800335e:	e008      	b.n	8003372 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003360:	2101      	movs	r1, #1
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f95c 	bl	8003620 <USB_SetDevSpeed>
 8003368:	e003      	b.n	8003372 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800336a:	2103      	movs	r1, #3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f957 	bl	8003620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003372:	2110      	movs	r1, #16
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f90b 	bl	8003590 <USB_FlushTxFifo>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f929 	bl	80035dc <USB_FlushRxFifo>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a6:	461a      	mov	r2, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e043      	b.n	8003446 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d4:	d118      	bne.n	8003408 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	461a      	mov	r2, r3
 80033ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e013      	b.n	800341a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	461a      	mov	r2, r3
 8003400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e008      	b.n	800341a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003414:	461a      	mov	r2, r3
 8003416:	2300      	movs	r3, #0
 8003418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003438:	461a      	mov	r2, r3
 800343a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800343e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3301      	adds	r3, #1
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3b7      	bcc.n	80033be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e043      	b.n	80034dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346a:	d118      	bne.n	800349e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e013      	b.n	80034b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e008      	b.n	80034b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2300      	movs	r3, #0
 80034ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	3301      	adds	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3b7      	bcc.n	8003454 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d110      	bne.n	8003520 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003504:	461a      	mov	r2, r3
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <USB_DevInit+0x2e8>)
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	4619      	mov	r1, r3
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <USB_DevInit+0x2ec>)
 800351c:	4313      	orrs	r3, r2
 800351e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800352c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f043 0210 	orr.w	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <USB_DevInit+0x2f0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f043 0208 	orr.w	r2, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <USB_DevInit+0x2f4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800357c:	b004      	add	sp, #16
 800357e:	4770      	bx	lr
 8003580:	00800100 	.word	0x00800100
 8003584:	00010003 	.word	0x00010003
 8003588:	803c3800 	.word	0x803c3800
 800358c:	40000004 	.word	0x40000004

08003590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	f043 0220 	orr.w	r2, r3, #32
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3301      	adds	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <USB_FlushTxFifo+0x48>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e006      	b.n	80035ca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d0f0      	beq.n	80035aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	00030d40 	.word	0x00030d40

080035dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2210      	movs	r2, #16
 80035ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a09      	ldr	r2, [pc, #36]	; (800361c <USB_FlushRxFifo+0x40>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e006      	b.n	800360e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b10      	cmp	r3, #16
 800360a:	d0f0      	beq.n	80035ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	00030d40 	.word	0x00030d40

08003620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003672:	2003      	movs	r0, #3
 8003674:	f7fd fbbe 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <USB_CoreReset+0x64>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e01b      	b.n	80036da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	daf2      	bge.n	8003690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <USB_CoreReset+0x64>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e006      	b.n	80036da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d0f0      	beq.n	80036ba <USB_CoreReset+0x36>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	00030d40 	.word	0x00030d40

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4e0d      	ldr	r6, [pc, #52]	; (8003724 <__libc_init_array+0x38>)
 80036f0:	4c0d      	ldr	r4, [pc, #52]	; (8003728 <__libc_init_array+0x3c>)
 80036f2:	1ba4      	subs	r4, r4, r6
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	2500      	movs	r5, #0
 80036f8:	42a5      	cmp	r5, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	4e0b      	ldr	r6, [pc, #44]	; (800372c <__libc_init_array+0x40>)
 80036fe:	4c0c      	ldr	r4, [pc, #48]	; (8003730 <__libc_init_array+0x44>)
 8003700:	f000 f820 	bl	8003744 <_init>
 8003704:	1ba4      	subs	r4, r4, r6
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	2500      	movs	r5, #0
 800370a:	42a5      	cmp	r5, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003714:	4798      	blx	r3
 8003716:	3501      	adds	r5, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800371e:	4798      	blx	r3
 8003720:	3501      	adds	r5, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	0800377c 	.word	0x0800377c
 8003728:	0800377c 	.word	0x0800377c
 800372c:	0800377c 	.word	0x0800377c
 8003730:	08003780 	.word	0x08003780

08003734 <memset>:
 8003734:	4402      	add	r2, r0
 8003736:	4603      	mov	r3, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	d100      	bne.n	800373e <memset+0xa>
 800373c:	4770      	bx	lr
 800373e:	f803 1b01 	strb.w	r1, [r3], #1
 8003742:	e7f9      	b.n	8003738 <memset+0x4>

08003744 <_init>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	bf00      	nop
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr

08003750 <_fini>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr
