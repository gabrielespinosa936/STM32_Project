
ADC_DMA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004210  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f8  080043f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  2000000c  0800440c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800440c  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed4d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f92  00000000  00000000  0002ed89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00031970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026510  00000000  00000000  000324b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad77  00000000  00000000  000589c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2286  00000000  00000000  0006373f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001559c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f0  00000000  00000000  00155a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080043c0 	.word	0x080043c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080043c0 	.word	0x080043c0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fca2 	bl	8000e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f815 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f993 	bl	8000840 <MX_GPIO_Init>
  MX_ETH_Init();
 800051a:	f000 f8f3 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800051e:	f000 f931 	bl	8000784 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000522:	f000 f95f 	bl	80007e4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000526:	f000 f89b 	bl	8000660 <MX_ADC1_Init>
//	  HAL_UART_Transmit(&huart3, (uint8_t*)storeMessage, strlen(storeMessage), HAL_MAX_DELAY);
//
//
//	  HAL_Delay(1);

	  HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 800052a:	2101      	movs	r1, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <main+0x34>)
 800052e:	f001 fe98 	bl	8002262 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000536:	f000 fceb 	bl	8000f10 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 800053a:	e7f6      	b.n	800052a <main+0x22>
 800053c:	40020400 	.word	0x40020400

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0b4      	sub	sp, #208	; 0xd0
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff2e 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2284      	movs	r2, #132	; 0x84
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f003 ff1f 	bl	80043b0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000572:	f001 ffcd 	bl	8002510 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b37      	ldr	r3, [pc, #220]	; (8000654 <SystemClock_Config+0x114>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	4a36      	ldr	r2, [pc, #216]	; (8000654 <SystemClock_Config+0x114>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	6413      	str	r3, [r2, #64]	; 0x40
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <SystemClock_Config+0x114>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <SystemClock_Config+0x118>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000596:	4a30      	ldr	r2, [pc, #192]	; (8000658 <SystemClock_Config+0x118>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <SystemClock_Config+0x118>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005cc:	2348      	movs	r3, #72	; 0x48
 80005ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 ffa4 	bl	8002530 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ee:	f000 f9e1 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000616:	2102      	movs	r1, #2
 8000618:	4618      	mov	r0, r3
 800061a:	f002 f9f9 	bl	8002a10 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000624:	f000 f9c6 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <SystemClock_Config+0x11c>)
 800062a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fbdc 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000646:	f000 f9b5 	bl	80009b4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	37d0      	adds	r7, #208	; 0xd0
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000
 800065c:	00200100 	.word	0x00200100

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c0:	f000 fc48 	bl	8000f54 <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f973 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006ce:	2305      	movs	r3, #5
 80006d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e0:	f000 fc7c 	bl	8000fdc <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ea:	f000 f963 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200004ac 	.word	0x200004ac
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ETH_Init+0x78>)
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_ETH_Init+0x7c>)
 800070c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ETH_Init+0x78>)
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ETH_Init+0x78>)
 8000716:	2200      	movs	r2, #0
 8000718:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_ETH_Init+0x78>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_ETH_Init+0x78>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_ETH_Init+0x78>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	3302      	adds	r3, #2
 8000732:	22e1      	movs	r2, #225	; 0xe1
 8000734:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_ETH_Init+0x78>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	3303      	adds	r3, #3
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_ETH_Init+0x78>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	3304      	adds	r3, #4
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_ETH_Init+0x78>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	3305      	adds	r3, #5
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_ETH_Init+0x78>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_ETH_Init+0x78>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_ETH_Init+0x78>)
 8000762:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000766:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_ETH_Init+0x78>)
 800076a:	f000 ff4b 	bl	8001604 <HAL_ETH_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000774:	f000 f91e 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200004f4 	.word	0x200004f4
 8000780:	40028000 	.word	0x40028000

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART3_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART3_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART3_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART3_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART3_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART3_UART_Init+0x58>)
 80007c8:	f002 ff04 	bl	80035d4 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f8ef 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	40004800 	.word	0x40004800

080007e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2206      	movs	r2, #6
 80007f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2201      	movs	r2, #1
 800080c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2201      	movs	r2, #1
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	f001 fd36 	bl	8002298 <HAL_PCD_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f8bf 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000a8 	.word	0x200000a8

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <MX_GPIO_Init+0x15c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a50      	ldr	r2, [pc, #320]	; (800099c <MX_GPIO_Init+0x15c>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <MX_GPIO_Init+0x15c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <MX_GPIO_Init+0x15c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4a      	ldr	r2, [pc, #296]	; (800099c <MX_GPIO_Init+0x15c>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b48      	ldr	r3, [pc, #288]	; (800099c <MX_GPIO_Init+0x15c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <MX_GPIO_Init+0x15c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a44      	ldr	r2, [pc, #272]	; (800099c <MX_GPIO_Init+0x15c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <MX_GPIO_Init+0x15c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <MX_GPIO_Init+0x15c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a3e      	ldr	r2, [pc, #248]	; (800099c <MX_GPIO_Init+0x15c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <MX_GPIO_Init+0x15c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <MX_GPIO_Init+0x15c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a38      	ldr	r2, [pc, #224]	; (800099c <MX_GPIO_Init+0x15c>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <MX_GPIO_Init+0x15c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <MX_GPIO_Init+0x15c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a32      	ldr	r2, [pc, #200]	; (800099c <MX_GPIO_Init+0x15c>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_GPIO_Init+0x15c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ec:	482c      	ldr	r0, [pc, #176]	; (80009a0 <MX_GPIO_Init+0x160>)
 80008ee:	f001 fc9f 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	482b      	ldr	r0, [pc, #172]	; (80009a4 <MX_GPIO_Init+0x164>)
 80008f8:	f001 fc9a 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000902:	4829      	ldr	r0, [pc, #164]	; (80009a8 <MX_GPIO_Init+0x168>)
 8000904:	f001 fc94 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_GPIO_Init+0x16c>)
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x170>)
 800091e:	f001 fadd 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000922:	f244 0381 	movw	r3, #16513	; 0x4081
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <MX_GPIO_Init+0x160>)
 800093c:	f001 face 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x164>)
 8000958:	f001 fac0 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_GPIO_Init+0x164>)
 8000970:	f001 fab4 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x168>)
 800098e:	f001 faa5 	bl	8001edc <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40021800 	.word	0x40021800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	10110000 	.word	0x10110000
 80009b0:	40020800 	.word	0x40020800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x44>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <HAL_ADC_MspInit+0x74>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d123      	bne.n	8000a76 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0x78>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_ADC_MspInit+0x78>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_ADC_MspInit+0x78>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_ADC_MspInit+0x78>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_ADC_MspInit+0x78>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_ADC_MspInit+0x78>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_ADC_MspInit+0x7c>)
 8000a72:	f001 fa33 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012000 	.word	0x40012000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_ETH_MspInit+0x158>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	f040 8096 	bne.w	8000bdc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ab0:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a4c      	ldr	r2, [pc, #304]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b4a      	ldr	r3, [pc, #296]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a3a      	ldr	r2, [pc, #232]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b58:	2332      	movs	r3, #50	; 0x32
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	481e      	ldr	r0, [pc, #120]	; (8000bec <HAL_ETH_MspInit+0x160>)
 8000b74:	f001 f9b2 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b78:	2386      	movs	r3, #134	; 0x86
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b88:	230b      	movs	r3, #11
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <HAL_ETH_MspInit+0x164>)
 8000b94:	f001 f9a2 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <HAL_ETH_MspInit+0x168>)
 8000bb6:	f001 f991 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <HAL_ETH_MspInit+0x16c>)
 8000bd8:	f001 f980 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40028000 	.word	0x40028000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020800 	.word	0x40020800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40021800 	.word	0x40021800

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x7c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d128      	bne.n	8000c70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c60:	2307      	movs	r3, #7
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_MspInit+0x84>)
 8000c6c:	f001 f936 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ca4:	d141      	bne.n	8000d2a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cbe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_PCD_MspInit+0xb4>)
 8000cdc:	f001 f8fe 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <HAL_PCD_MspInit+0xb4>)
 8000cf6:	f001 f8f1 	bl	8001edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	6353      	str	r3, [r2, #52]	; 0x34
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_PCD_MspInit+0xb0>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f89e 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <SystemInit+0x5c>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <SystemInit+0x5c>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <SystemInit+0x60>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <SystemInit+0x60>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <SystemInit+0x60>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <SystemInit+0x60>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <SystemInit+0x60>)
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <SystemInit+0x64>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <SystemInit+0x60>)
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <SystemInit+0x68>)
 8000dce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <SystemInit+0x60>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <SystemInit+0x60>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x60>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SystemInit+0x5c>)
 8000de4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de8:	609a      	str	r2, [r3, #8]
#endif
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	fef6ffff 	.word	0xfef6ffff
 8000e00:	24003010 	.word	0x24003010

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr  r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffb3 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f003 fa99 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fb67 	bl	8000508 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000e40:	08004400 	.word	0x08004400
  ldr  r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e50:	20000540 	.word	0x20000540

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>

08000e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 fb9e 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f805 	bl	8000e70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fdad 	bl	80009c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fbab 	bl	80015ea <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eac:	f000 fb81 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000053c 	.word	0x2000053c

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000053c 	.word	0x2000053c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_Delay+0x40>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e031      	b.n	8000fce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d109      	bne.n	8000f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fd4a 	bl	8000a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_Init+0x84>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0202 	orr.w	r2, r3, #2
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f94e 	bl	8001244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbe:	e001      	b.n	8000fc4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	ffffeefd 	.word	0xffffeefd

08000fdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1c>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e115      	b.n	8001224 <HAL_ADC_ConfigChannel+0x248>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b09      	cmp	r3, #9
 8001006:	d935      	bls.n	8001074 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68d9      	ldr	r1, [r3, #12]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	3b1e      	subs	r3, #30
 800101e:	2207      	movs	r2, #7
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43da      	mvns	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	400a      	ands	r2, r1
 800102c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7f      	ldr	r2, [pc, #508]	; (8001230 <HAL_ADC_ConfigChannel+0x254>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d10a      	bne.n	800104e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68d9      	ldr	r1, [r3, #12]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	061a      	lsls	r2, r3, #24
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	e035      	b.n	80010ba <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68d9      	ldr	r1, [r3, #12]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	4603      	mov	r3, r0
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4403      	add	r3, r0
 8001066:	3b1e      	subs	r3, #30
 8001068:	409a      	lsls	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	e022      	b.n	80010ba <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6919      	ldr	r1, [r3, #16]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	2207      	movs	r2, #7
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6919      	ldr	r1, [r3, #16]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4403      	add	r3, r0
 80010b0:	409a      	lsls	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d824      	bhi.n	800110c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b05      	subs	r3, #5
 80010d4:	221f      	movs	r2, #31
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	400a      	ands	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b05      	subs	r3, #5
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
 800110a:	e04c      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d824      	bhi.n	800115e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b23      	subs	r3, #35	; 0x23
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43da      	mvns	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	400a      	ands	r2, r1
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	3b23      	subs	r3, #35	; 0x23
 8001150:	fa00 f203 	lsl.w	r2, r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
 800115c:	e023      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b41      	subs	r3, #65	; 0x41
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b41      	subs	r3, #65	; 0x41
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_ADC_ConfigChannel+0x258>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d109      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1e8>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b12      	cmp	r3, #18
 80011b6:	d105      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_ADC_ConfigChannel+0x25c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_ADC_ConfigChannel+0x25c>)
 80011be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <HAL_ADC_ConfigChannel+0x258>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d125      	bne.n	800121a <HAL_ADC_ConfigChannel+0x23e>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_ADC_ConfigChannel+0x254>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d003      	beq.n	80011e0 <HAL_ADC_ConfigChannel+0x204>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b11      	cmp	r3, #17
 80011de:	d11c      	bne.n	800121a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_ADC_ConfigChannel+0x25c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_ADC_ConfigChannel+0x25c>)
 80011e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ea:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_ADC_ConfigChannel+0x254>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d111      	bne.n	800121a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_ADC_ConfigChannel+0x260>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_ADC_ConfigChannel+0x264>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9a      	lsrs	r2, r3, #18
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800120c:	e002      	b.n	8001214 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3b01      	subs	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	10000012 	.word	0x10000012
 8001234:	40012000 	.word	0x40012000
 8001238:	40012300 	.word	0x40012300
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83

08001244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800124c:	4b78      	ldr	r3, [pc, #480]	; (8001430 <ADC_Init+0x1ec>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a77      	ldr	r2, [pc, #476]	; (8001430 <ADC_Init+0x1ec>)
 8001252:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001256:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001258:	4b75      	ldr	r3, [pc, #468]	; (8001430 <ADC_Init+0x1ec>)
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4973      	ldr	r1, [pc, #460]	; (8001430 <ADC_Init+0x1ec>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	021a      	lsls	r2, r3, #8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6899      	ldr	r1, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	4a58      	ldr	r2, [pc, #352]	; (8001434 <ADC_Init+0x1f0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d022      	beq.n	800131e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e00f      	b.n	800133e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800132c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800133c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0202 	bic.w	r2, r2, #2
 800134c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6899      	ldr	r1, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	005a      	lsls	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01b      	beq.n	80013a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800137a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800138a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6859      	ldr	r1, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	3b01      	subs	r3, #1
 8001398:	035a      	lsls	r2, r3, #13
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	e007      	b.n	80013b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	051a      	lsls	r2, r3, #20
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013f6:	025a      	lsls	r2, r3, #9
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	029a      	lsls	r2, r3, #10
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40012300 	.word	0x40012300
 8001434:	0f000001 	.word	0x0f000001

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	4313      	orrs	r3, r2
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	05fa0000 	.word	0x05fa0000

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff47 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff5c 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff8e 	bl	80014f0 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffb0 	bl	8001558 <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001614:	4ba9      	ldr	r3, [pc, #676]	; (80018bc <HAL_ETH_Init+0x2b8>)
 8001616:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e183      	b.n	8001932 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fa24 	bl	8000a8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b9e      	ldr	r3, [pc, #632]	; (80018c0 <HAL_ETH_Init+0x2bc>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	4a9d      	ldr	r2, [pc, #628]	; (80018c0 <HAL_ETH_Init+0x2bc>)
 800164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164e:	6453      	str	r3, [r2, #68]	; 0x44
 8001650:	4b9b      	ldr	r3, [pc, #620]	; (80018c0 <HAL_ETH_Init+0x2bc>)
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800165c:	4b99      	ldr	r3, [pc, #612]	; (80018c4 <HAL_ETH_Init+0x2c0>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a98      	ldr	r2, [pc, #608]	; (80018c4 <HAL_ETH_Init+0x2c0>)
 8001662:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001666:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001668:	4b96      	ldr	r3, [pc, #600]	; (80018c4 <HAL_ETH_Init+0x2c0>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4994      	ldr	r1, [pc, #592]	; (80018c4 <HAL_ETH_Init+0x2c0>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800168e:	f7ff fc33 	bl	8000ef8 <HAL_GetTick>
 8001692:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001694:	e011      	b.n	80016ba <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001696:	f7ff fc2f 	bl	8000ef8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a4:	d909      	bls.n	80016ba <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2203      	movs	r2, #3
 80016aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e13b      	b.n	8001932 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e4      	bne.n	8001696 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016dc:	f001 fb58 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 80016e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4a78      	ldr	r2, [pc, #480]	; (80018c8 <HAL_ETH_Init+0x2c4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d908      	bls.n	80016fc <HAL_ETH_Init+0xf8>
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4a77      	ldr	r2, [pc, #476]	; (80018cc <HAL_ETH_Init+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d804      	bhi.n	80016fc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e027      	b.n	800174c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	4a73      	ldr	r2, [pc, #460]	; (80018cc <HAL_ETH_Init+0x2c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d908      	bls.n	8001716 <HAL_ETH_Init+0x112>
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	4a72      	ldr	r2, [pc, #456]	; (80018d0 <HAL_ETH_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d804      	bhi.n	8001716 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f043 030c 	orr.w	r3, r3, #12
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	e01a      	b.n	800174c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4a6d      	ldr	r2, [pc, #436]	; (80018d0 <HAL_ETH_Init+0x2cc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d903      	bls.n	8001726 <HAL_ETH_Init+0x122>
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4a6c      	ldr	r2, [pc, #432]	; (80018d4 <HAL_ETH_Init+0x2d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d911      	bls.n	800174a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4a6a      	ldr	r2, [pc, #424]	; (80018d4 <HAL_ETH_Init+0x2d0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d908      	bls.n	8001740 <HAL_ETH_Init+0x13c>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4a69      	ldr	r2, [pc, #420]	; (80018d8 <HAL_ETH_Init+0x2d4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d804      	bhi.n	8001740 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e005      	b.n	800174c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	e000      	b.n	800174c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800174a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001754:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f956 	bl	8001a0c <HAL_ETH_WritePHYRegister>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800176a:	6939      	ldr	r1, [r7, #16]
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f9b3 	bl	8001ad8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0d9      	b.n	8001932 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800177e:	20ff      	movs	r0, #255	; 0xff
 8001780:	f7ff fbc6 	bl	8000f10 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a7 	beq.w	80018dc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800178e:	f7ff fbb3 	bl	8000ef8 <HAL_GetTick>
 8001792:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	461a      	mov	r2, r3
 800179a:	2101      	movs	r1, #1
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8cd 	bl	800193c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80017a2:	f7ff fba9 	bl	8000ef8 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d90f      	bls.n	80017d4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017b8:	6939      	ldr	r1, [r7, #16]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f98c 	bl	8001ad8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0ae      	b.n	8001932 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0da      	beq.n	8001794 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f911 	bl	8001a0c <HAL_ETH_WritePHYRegister>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f96e 	bl	8001ad8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001804:	2301      	movs	r3, #1
 8001806:	e094      	b.n	8001932 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff fb76 	bl	8000ef8 <HAL_GetTick>
 800180c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	461a      	mov	r2, r3
 8001814:	2101      	movs	r1, #1
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f890 	bl	800193c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800181c:	f7ff fb6c 	bl	8000ef8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d90f      	bls.n	800184e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f94f 	bl	8001ad8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e071      	b.n	8001932 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0da      	beq.n	800180e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	461a      	mov	r2, r3
 800185e:	211f      	movs	r1, #31
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f86b 	bl	800193c <HAL_ETH_ReadPHYRegister>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00b      	beq.n	8001884 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001870:	6939      	ldr	r1, [r7, #16]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f930 	bl	8001ad8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001880:	2301      	movs	r3, #1
 8001882:	e056      	b.n	8001932 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	e002      	b.n	800189e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	e037      	b.n	8001920 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e032      	b.n	8001920 <HAL_ETH_Init+0x31c>
 80018ba:	bf00      	nop
 80018bc:	03938700 	.word	0x03938700
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	01312cff 	.word	0x01312cff
 80018cc:	02160ebf 	.word	0x02160ebf
 80018d0:	039386ff 	.word	0x039386ff
 80018d4:	05f5e0ff 	.word	0x05f5e0ff
 80018d8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f889 	bl	8001a0c <HAL_ETH_WritePHYRegister>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00b      	beq.n	8001918 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8e6 	bl	8001ad8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e00c      	b.n	8001932 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001918:	f640 70ff 	movw	r0, #4095	; 0xfff
 800191c:	f7ff faf8 	bl	8000f10 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001920:	6939      	ldr	r1, [r7, #16]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8d8 	bl	8001ad8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	460b      	mov	r3, r1
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b82      	cmp	r3, #130	; 0x82
 800195c:	d101      	bne.n	8001962 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
 8001960:	e050      	b.n	8001a04 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2282      	movs	r2, #130	; 0x82
 8001966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 031c 	and.w	r3, r3, #28
 8001978:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8a1b      	ldrh	r3, [r3, #16]
 800197e:	02db      	lsls	r3, r3, #11
 8001980:	b29b      	uxth	r3, r3
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001988:	897b      	ldrh	r3, [r7, #10]
 800198a:	019b      	lsls	r3, r3, #6
 800198c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f023 0302 	bic.w	r3, r3, #2
 800199c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019ae:	f7ff faa3 	bl	8000ef8 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b4:	e015      	b.n	80019e2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019b6:	f7ff fa9f 	bl	8000ef8 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d309      	bcc.n	80019da <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e014      	b.n	8001a04 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e4      	bne.n	80019b6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	460b      	mov	r3, r1
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b42      	cmp	r3, #66	; 0x42
 8001a2c:	d101      	bne.n	8001a32 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e04e      	b.n	8001ad0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2242      	movs	r2, #66	; 0x42
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 031c 	and.w	r3, r3, #28
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8a1b      	ldrh	r3, [r3, #16]
 8001a4e:	02db      	lsls	r3, r3, #11
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	019b      	lsls	r3, r3, #6
 8001a5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a88:	f7ff fa36 	bl	8000ef8 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a8e:	e015      	b.n	8001abc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a90:	f7ff fa32 	bl	8000ef8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d309      	bcc.n	8001ab4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e00d      	b.n	8001ad0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1e4      	bne.n	8001a90 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0b0      	sub	sp, #192	; 0xc0
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b22:	663b      	str	r3, [r7, #96]	; 0x60
 8001b24:	e001      	b.n	8001b2a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b34:	2300      	movs	r3, #0
 8001b36:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001bac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb0:	4bab      	ldr	r3, [pc, #684]	; (8001e60 <ETH_MACDMAConfig+0x388>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bbc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001bc0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001bc4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001bca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001bce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001bd2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001bd8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bdc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001be0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001be4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001be8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff f97f 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c1a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c20:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c24:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c2a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c30:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c36:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c3c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c40:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c48:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c4a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff f95a 	bl	8000f10 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c64:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c6e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c78:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c88:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c96:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c9c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ca2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ca8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001cae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001cb4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001cb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cc8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff f91b 	bl	8000f10 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ce4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ce8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff f906 	bl	8000f10 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d0c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d20:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d32:	2304      	movs	r3, #4
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001d6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <ETH_MACDMAConfig+0x38c>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d76:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d78:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d7a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d7c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d7e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d80:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d82:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d84:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d86:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d88:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d8a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d8e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d92:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d96:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001daa:	4413      	add	r3, r2
 8001dac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001db0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff f8a4 	bl	8000f10 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ddc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001de0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001de4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001de8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001df2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e00:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff f87d 	bl	8000f10 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e22:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10d      	bne.n	8001e48 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6811      	ldr	r1, [r2, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <ETH_MACDMAConfig+0x390>)
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e44:	440b      	add	r3, r1
 8001e46:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f80b 	bl	8001e6c <ETH_MACAddressConfig>
}
 8001e56:	bf00      	nop
 8001e58:	37c0      	adds	r7, #192	; 0xc0
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	ff20810f 	.word	0xff20810f
 8001e64:	f8de3f23 	.word	0xf8de3f23
 8001e68:	00010040 	.word	0x00010040

08001e6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3305      	adds	r3, #5
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	3204      	adds	r2, #4
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <ETH_MACAddressConfig+0x68>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	061a      	lsls	r2, r3, #24
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <ETH_MACAddressConfig+0x6c>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	6013      	str	r3, [r2, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40028040 	.word	0x40028040
 8001ed8:	40028044 	.word	0x40028044

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e175      	b.n	80021e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 8164 	bne.w	80021e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x4e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d123      	bne.n	8001f72 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	69b9      	ldr	r1, [r7, #24]
 8001f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d00b      	beq.n	8001fc6 <HAL_GPIO_Init+0xea>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d130      	bne.n	8002028 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0201 	and.w	r2, r3, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80be 	beq.w	80021e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_GPIO_Init+0x320>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a64      	ldr	r2, [pc, #400]	; (80021fc <HAL_GPIO_Init+0x320>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_GPIO_Init+0x320>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800207e:	4a60      	ldr	r2, [pc, #384]	; (8002200 <HAL_GPIO_Init+0x324>)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_GPIO_Init+0x328>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d037      	beq.n	800211a <HAL_GPIO_Init+0x23e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_GPIO_Init+0x32c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_GPIO_Init+0x23a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a55      	ldr	r2, [pc, #340]	; (800220c <HAL_GPIO_Init+0x330>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02b      	beq.n	8002112 <HAL_GPIO_Init+0x236>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x334>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x232>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a53      	ldr	r2, [pc, #332]	; (8002214 <HAL_GPIO_Init+0x338>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x22e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x33c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x22a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x340>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x226>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_GPIO_Init+0x344>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x222>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <HAL_GPIO_Init+0x348>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x21e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_GPIO_Init+0x34c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x21a>
 80020f2:	2309      	movs	r3, #9
 80020f4:	e012      	b.n	800211c <HAL_GPIO_Init+0x240>
 80020f6:	230a      	movs	r3, #10
 80020f8:	e010      	b.n	800211c <HAL_GPIO_Init+0x240>
 80020fa:	2308      	movs	r3, #8
 80020fc:	e00e      	b.n	800211c <HAL_GPIO_Init+0x240>
 80020fe:	2307      	movs	r3, #7
 8002100:	e00c      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002102:	2306      	movs	r3, #6
 8002104:	e00a      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002106:	2305      	movs	r3, #5
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x240>
 800210a:	2304      	movs	r3, #4
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x240>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x240>
 800211a:	2300      	movs	r3, #0
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800212c:	4934      	ldr	r1, [pc, #208]	; (8002200 <HAL_GPIO_Init+0x324>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_GPIO_Init+0x350>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215e:	4a33      	ldr	r2, [pc, #204]	; (800222c <HAL_GPIO_Init+0x350>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_GPIO_Init+0x350>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_GPIO_Init+0x350>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_GPIO_Init+0x350>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a1e      	ldr	r2, [pc, #120]	; (800222c <HAL_GPIO_Init+0x350>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_GPIO_Init+0x350>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_GPIO_Init+0x350>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f67f ae86 	bls.w	8001efc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	3724      	adds	r7, #36	; 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40021400 	.word	0x40021400
 800221c:	40021800 	.word	0x40021800
 8002220:	40021c00 	.word	0x40021c00
 8002224:	40022000 	.word	0x40022000
 8002228:	40022400 	.word	0x40022400
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	401a      	ands	r2, r3
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	429a      	cmp	r2, r3
 800227a:	d104      	bne.n	8002286 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	b08f      	sub	sp, #60	; 0x3c
 800229c:	af0a      	add	r7, sp, #40	; 0x28
 800229e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e10a      	b.n	80024c0 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fce0 	bl	8000c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fde3 	bl	8003e9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	687e      	ldr	r6, [r7, #4]
 80022de:	466d      	mov	r5, sp
 80022e0:	f106 0410 	add.w	r4, r6, #16
 80022e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f4:	1d33      	adds	r3, r6, #4
 80022f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f8:	6838      	ldr	r0, [r7, #0]
 80022fa:	f001 fd77 	bl	8003dec <USB_CoreInit>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d7      	b.n	80024c0 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fdd1 	bl	8003ebe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e04a      	b.n	80023b8 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	333d      	adds	r3, #61	; 0x3d
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	333c      	adds	r3, #60	; 0x3c
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	b298      	uxth	r0, r3
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3342      	adds	r3, #66	; 0x42
 800235e:	4602      	mov	r2, r0
 8002360:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	333f      	adds	r3, #63	; 0x3f
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3344      	adds	r3, #68	; 0x44
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3348      	adds	r3, #72	; 0x48
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3350      	adds	r3, #80	; 0x50
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	3301      	adds	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3af      	bcc.n	8002322 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e044      	b.n	8002452 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	d3b5      	bcc.n	80023c8 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	687e      	ldr	r6, [r7, #4]
 8002464:	466d      	mov	r5, sp
 8002466:	f106 0410 	add.w	r4, r6, #16
 800246a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002476:	e885 0003 	stmia.w	r5, {r0, r1}
 800247a:	1d33      	adds	r3, r6, #4
 800247c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	f001 fd48 	bl	8003f14 <USB_DevInit>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e014      	b.n	80024c0 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d102      	bne.n	80024b4 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f80a 	bl	80024c8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 ff08 	bl	80042ce <USB_DevDisconnect>

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PCDEx_ActivateLPM+0x44>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	10000003 	.word	0x10000003

08002510 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800251a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000

08002530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e25c      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8087 	beq.w	8002662 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002554:	4b96      	ldr	r3, [pc, #600]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b04      	cmp	r3, #4
 800255e:	d00c      	beq.n	800257a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002560:	4b93      	ldr	r3, [pc, #588]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d112      	bne.n	8002592 <HAL_RCC_OscConfig+0x62>
 800256c:	4b90      	ldr	r3, [pc, #576]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002578:	d10b      	bne.n	8002592 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257a:	4b8d      	ldr	r3, [pc, #564]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d06c      	beq.n	8002660 <HAL_RCC_OscConfig+0x130>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d168      	bne.n	8002660 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e236      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x7a>
 800259c:	4b84      	ldr	r3, [pc, #528]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a83      	ldr	r2, [pc, #524]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	e02e      	b.n	8002608 <HAL_RCC_OscConfig+0xd8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x9c>
 80025b2:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b7c      	ldr	r3, [pc, #496]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7b      	ldr	r2, [pc, #492]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e01d      	b.n	8002608 <HAL_RCC_OscConfig+0xd8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0xc0>
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a72      	ldr	r2, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0xd8>
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6e      	ldr	r2, [pc, #440]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6b      	ldr	r2, [pc, #428]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fc72 	bl	8000ef8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fc6e 	bl	8000ef8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1ea      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0xe8>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fc5e 	bl	8000ef8 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fc5a 	bl	8000ef8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1d6      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x110>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d069      	beq.n	8002742 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266e:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x190>
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x17a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1aa      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	493d      	ldr	r1, [pc, #244]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e040      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a38      	ldr	r2, [pc, #224]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc10 	bl	8000ef8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fc0c 	bl	8000ef8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e188      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4929      	ldr	r1, [pc, #164]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
 800270e:	e018      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fbec 	bl	8000ef8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fbe8 	bl	8000ef8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e164      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d038      	beq.n	80027c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d019      	beq.n	800278a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fbc9 	bl	8000ef8 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276a:	f7fe fbc5 	bl	8000ef8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e141      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x23a>
 8002788:	e01a      	b.n	80027c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800278c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe fbaf 	bl	8000ef8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe fbab 	bl	8000ef8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d903      	bls.n	80027b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e127      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
 80027b0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a4 	beq.w	8002916 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b8e      	ldr	r3, [pc, #568]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a8a      	ldr	r2, [pc, #552]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002802:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a81      	ldr	r2, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7fe fb73 	bl	8000ef8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7fe fb6f 	bl	8000ef8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b64      	cmp	r3, #100	; 0x64
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0eb      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	4b78      	ldr	r3, [pc, #480]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x31a>
 800283c:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a71      	ldr	r2, [pc, #452]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	e02d      	b.n	80028a6 <HAL_RCC_OscConfig+0x376>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x33c>
 8002852:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a6c      	ldr	r2, [pc, #432]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a69      	ldr	r2, [pc, #420]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	6713      	str	r3, [r2, #112]	; 0x70
 800286a:	e01c      	b.n	80028a6 <HAL_RCC_OscConfig+0x376>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d10c      	bne.n	800288e <HAL_RCC_OscConfig+0x35e>
 8002874:	4b64      	ldr	r3, [pc, #400]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a63      	ldr	r2, [pc, #396]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	; 0x70
 800288c:	e00b      	b.n	80028a6 <HAL_RCC_OscConfig+0x376>
 800288e:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d015      	beq.n	80028da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7fe fb23 	bl	8000ef8 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe fb1f 	bl	8000ef8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e099      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028cc:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ee      	beq.n	80028b6 <HAL_RCC_OscConfig+0x386>
 80028d8:	e014      	b.n	8002904 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fb0d 	bl	8000ef8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fb09 	bl	8000ef8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e083      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ee      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290a:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a3e      	ldr	r2, [pc, #248]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06f      	beq.n	80029fe <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291e:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d067      	beq.n	80029fa <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d149      	bne.n	80029c6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a34      	ldr	r2, [pc, #208]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fadb 	bl	8000ef8 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fad7 	bl	8000ef8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e053      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	019b      	lsls	r3, r3, #6
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	4313      	orrs	r3, r2
 800298a:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 800298c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002990:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 8002998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe faab 	bl	8000ef8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe faa7 	bl	8000ef8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e023      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x476>
 80029c4:	e01b      	b.n	80029fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0f      	ldr	r2, [pc, #60]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80029cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fa91 	bl	8000ef8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe fa8d 	bl	8000ef8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e009      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_OscConfig+0x4d8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x4aa>
 80029f8:	e001      	b.n	80029fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0ce      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d910      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 020f 	bic.w	r2, r3, #15
 8002a3e:	4964      	ldr	r1, [pc, #400]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b6      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a51      	ldr	r2, [pc, #324]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494c      	ldr	r1, [pc, #304]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d040      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07d      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e071      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e069      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4935      	ldr	r1, [pc, #212]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe f9f8 	bl	8000ef8 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe f9f4 	bl	8000ef8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e051      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d210      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 020f 	bic.w	r2, r3, #15
 8002b4a:	4921      	ldr	r1, [pc, #132]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e030      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4915      	ldr	r1, [pc, #84]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f81d 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4601      	mov	r1, r0
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_RCC_ClockConfig+0x1cc>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fe f956 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	080043d8 	.word	0x080043d8
 8002bdc:	20000000 	.word	0x20000000

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d007      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x32>
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d008      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x38>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80b4 	bne.w	8002d74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c0e:	60bb      	str	r3, [r7, #8]
       break;
 8002c10:	e0b3      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c14:	60bb      	str	r3, [r7, #8]
      break;
 8002c16:	e0b0      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04a      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	ea03 0501 	and.w	r5, r3, r1
 8002c44:	ea04 0602 	and.w	r6, r4, r2
 8002c48:	4629      	mov	r1, r5
 8002c4a:	4632      	mov	r2, r6
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	f04f 0400 	mov.w	r4, #0
 8002c54:	0154      	lsls	r4, r2, #5
 8002c56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c5a:	014b      	lsls	r3, r1, #5
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4622      	mov	r2, r4
 8002c60:	1b49      	subs	r1, r1, r5
 8002c62:	eb62 0206 	sbc.w	r2, r2, r6
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	0194      	lsls	r4, r2, #6
 8002c70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c74:	018b      	lsls	r3, r1, #6
 8002c76:	1a5b      	subs	r3, r3, r1
 8002c78:	eb64 0402 	sbc.w	r4, r4, r2
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	00e2      	lsls	r2, r4, #3
 8002c86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c8a:	00d9      	lsls	r1, r3, #3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4614      	mov	r4, r2
 8002c90:	195b      	adds	r3, r3, r5
 8002c92:	eb44 0406 	adc.w	r4, r4, r6
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	0262      	lsls	r2, r4, #9
 8002ca0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ca4:	0259      	lsls	r1, r3, #9
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4614      	mov	r4, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	4621      	mov	r1, r4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	f7fd faa6 	bl	8000208 <__aeabi_uldivmod>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e049      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	f04f 0400 	mov.w	r4, #0
 8002cce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	ea03 0501 	and.w	r5, r3, r1
 8002cda:	ea04 0602 	and.w	r6, r4, r2
 8002cde:	4629      	mov	r1, r5
 8002ce0:	4632      	mov	r2, r6
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	f04f 0400 	mov.w	r4, #0
 8002cea:	0154      	lsls	r4, r2, #5
 8002cec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cf0:	014b      	lsls	r3, r1, #5
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	1b49      	subs	r1, r1, r5
 8002cf8:	eb62 0206 	sbc.w	r2, r2, r6
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f04f 0400 	mov.w	r4, #0
 8002d04:	0194      	lsls	r4, r2, #6
 8002d06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d0a:	018b      	lsls	r3, r1, #6
 8002d0c:	1a5b      	subs	r3, r3, r1
 8002d0e:	eb64 0402 	sbc.w	r4, r4, r2
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	00e2      	lsls	r2, r4, #3
 8002d1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d20:	00d9      	lsls	r1, r3, #3
 8002d22:	460b      	mov	r3, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	195b      	adds	r3, r3, r5
 8002d28:	eb44 0406 	adc.w	r4, r4, r6
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	02a2      	lsls	r2, r4, #10
 8002d36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d3a:	0299      	lsls	r1, r3, #10
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	4621      	mov	r1, r4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f04f 0400 	mov.w	r4, #0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	f7fd fa5b 	bl	8000208 <__aeabi_uldivmod>
 8002d52:	4603      	mov	r3, r0
 8002d54:	460c      	mov	r4, r1
 8002d56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	60bb      	str	r3, [r7, #8]
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d76:	60bb      	str	r3, [r7, #8]
      break;
 8002d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4601      	mov	r1, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	080043e8 	.word	0x080043e8

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff ffdc 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4a03      	ldr	r2, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	080043e8 	.word	0x080043e8

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d012      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e20:	4b69      	ldr	r3, [pc, #420]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a68      	ldr	r2, [pc, #416]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e2a:	6093      	str	r3, [r2, #8]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	4964      	ldr	r1, [pc, #400]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	4959      	ldr	r1, [pc, #356]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d017      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	494a      	ldr	r1, [pc, #296]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 808b 	beq.w	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	4a39      	ldr	r2, [pc, #228]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee8:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f00:	f7fd fffa 	bl	8000ef8 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fd fff6 	bl	8000ef8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e355      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d035      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d02e      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d114      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd ffbe 	bl	8000ef8 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fd ffba 	bl	8000ef8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e317      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ee      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	4901      	ldr	r1, [pc, #4]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	0ffffcff 	.word	0x0ffffcff
 8002fd4:	4bb0      	ldr	r3, [pc, #704]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4aaf      	ldr	r2, [pc, #700]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fde:	6093      	str	r3, [r2, #8]
 8002fe0:	4bad      	ldr	r3, [pc, #692]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	49aa      	ldr	r1, [pc, #680]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ffe:	4ba6      	ldr	r3, [pc, #664]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003004:	4aa4      	ldr	r2, [pc, #656]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800300e:	4ba2      	ldr	r3, [pc, #648]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003010:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	499f      	ldr	r1, [pc, #636]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302c:	4b9a      	ldr	r3, [pc, #616]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303a:	4997      	ldr	r1, [pc, #604]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800304e:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800305c:	498e      	ldr	r1, [pc, #568]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003070:	4b89      	ldr	r3, [pc, #548]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307e:	4986      	ldr	r1, [pc, #536]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	497d      	ldr	r1, [pc, #500]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b4:	4b78      	ldr	r3, [pc, #480]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4975      	ldr	r1, [pc, #468]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f023 020c 	bic.w	r2, r3, #12
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	496c      	ldr	r1, [pc, #432]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030f8:	4b67      	ldr	r3, [pc, #412]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	4964      	ldr	r1, [pc, #400]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	495b      	ldr	r1, [pc, #364]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800313c:	4b56      	ldr	r3, [pc, #344]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	4953      	ldr	r1, [pc, #332]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800315e:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	494a      	ldr	r1, [pc, #296]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003180:	4b45      	ldr	r3, [pc, #276]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	4942      	ldr	r1, [pc, #264]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031c4:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d2:	4931      	ldr	r1, [pc, #196]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031e6:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f4:	4928      	ldr	r1, [pc, #160]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	4918      	ldr	r1, [pc, #96]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003258:	490f      	ldr	r1, [pc, #60]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d005      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326e:	f040 80d8 	bne.w	8003422 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003278:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800327c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327e:	f7fd fe3b 	bl	8000ef8 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003286:	f7fd fe37 	bl	8000ef8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	d903      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e196      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003298:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800329c:	4b6c      	ldr	r3, [pc, #432]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ee      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d021      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032bc:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d0:	0e1b      	lsrs	r3, r3, #24
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	019a      	lsls	r2, r3, #6
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	071b      	lsls	r3, r3, #28
 80032f0:	4957      	ldr	r1, [pc, #348]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02e      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003322:	d129      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003324:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003338:	0f1b      	lsrs	r3, r3, #28
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	019a      	lsls	r2, r3, #6
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	431a      	orrs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	071b      	lsls	r3, r3, #28
 8003358:	493d      	ldr	r1, [pc, #244]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003366:	f023 021f 	bic.w	r2, r3, #31
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	3b01      	subs	r3, #1
 8003370:	4937      	ldr	r1, [pc, #220]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003384:	4b32      	ldr	r3, [pc, #200]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338a:	0e1b      	lsrs	r3, r3, #24
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003392:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003398:	0f1b      	lsrs	r3, r3, #28
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	019a      	lsls	r2, r3, #6
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	071b      	lsls	r3, r3, #28
 80033b8:	4925      	ldr	r1, [pc, #148]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d011      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	019a      	lsls	r2, r3, #6
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	071b      	lsls	r3, r3, #28
 80033e8:	4919      	ldr	r1, [pc, #100]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a16      	ldr	r2, [pc, #88]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fd fd7c 	bl	8000ef8 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003404:	f7fd fd78 	bl	8000ef8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0d7      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 80cd 	bne.w	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003436:	f7fd fd5f 	bl	8000ef8 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800343e:	f7fd fd5b 	bl	8000ef8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d903      	bls.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0ba      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003450:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800345c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003460:	d0ed      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02e      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12a      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800348a:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003498:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	0f1b      	lsrs	r3, r3, #28
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	019a      	lsls	r2, r3, #6
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	071b      	lsls	r3, r3, #28
 80034be:	4944      	ldr	r1, [pc, #272]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034c6:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	493d      	ldr	r1, [pc, #244]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d022      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f4:	d11d      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003504:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	0f1b      	lsrs	r3, r3, #28
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	019a      	lsls	r2, r3, #6
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	071b      	lsls	r3, r3, #28
 800352a:	4929      	ldr	r1, [pc, #164]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d028      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	0e1b      	lsrs	r3, r3, #24
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	019a      	lsls	r2, r3, #6
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	431a      	orrs	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	4917      	ldr	r1, [pc, #92]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	4911      	ldr	r1, [pc, #68]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd fcac 	bl	8000ef8 <HAL_GetTick>
 80035a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035a4:	f7fd fca8 	bl	8000ef8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e007      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c2:	d1ef      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e040      	b.n	8003668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fb00 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f82c 	bl	8003670 <UART_SetConfig>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e022      	b.n	8003668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fac4 	bl	8003bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fb4b 	bl	8003cfc <UART_CheckIdleState>
 8003666:	4603      	mov	r3, r0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4bb1      	ldr	r3, [pc, #708]	; (8003964 <UART_SetConfig+0x2f4>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	6939      	ldr	r1, [r7, #16]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a9f      	ldr	r2, [pc, #636]	; (8003968 <UART_SetConfig+0x2f8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d121      	bne.n	8003734 <UART_SetConfig+0xc4>
 80036f0:	4b9e      	ldr	r3, [pc, #632]	; (800396c <UART_SetConfig+0x2fc>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d816      	bhi.n	800372c <UART_SetConfig+0xbc>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0x94>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003715 	.word	0x08003715
 8003708:	08003721 	.word	0x08003721
 800370c:	0800371b 	.word	0x0800371b
 8003710:	08003727 	.word	0x08003727
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e151      	b.n	80039be <UART_SetConfig+0x34e>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e14e      	b.n	80039be <UART_SetConfig+0x34e>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e14b      	b.n	80039be <UART_SetConfig+0x34e>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e148      	b.n	80039be <UART_SetConfig+0x34e>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	bf00      	nop
 8003732:	e144      	b.n	80039be <UART_SetConfig+0x34e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a8d      	ldr	r2, [pc, #564]	; (8003970 <UART_SetConfig+0x300>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d134      	bne.n	80037a8 <UART_SetConfig+0x138>
 800373e:	4b8b      	ldr	r3, [pc, #556]	; (800396c <UART_SetConfig+0x2fc>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d829      	bhi.n	80037a0 <UART_SetConfig+0x130>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <UART_SetConfig+0xe4>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003789 	.word	0x08003789
 8003758:	080037a1 	.word	0x080037a1
 800375c:	080037a1 	.word	0x080037a1
 8003760:	080037a1 	.word	0x080037a1
 8003764:	08003795 	.word	0x08003795
 8003768:	080037a1 	.word	0x080037a1
 800376c:	080037a1 	.word	0x080037a1
 8003770:	080037a1 	.word	0x080037a1
 8003774:	0800378f 	.word	0x0800378f
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037a1 	.word	0x080037a1
 8003784:	0800379b 	.word	0x0800379b
 8003788:	2300      	movs	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e117      	b.n	80039be <UART_SetConfig+0x34e>
 800378e:	2302      	movs	r3, #2
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e114      	b.n	80039be <UART_SetConfig+0x34e>
 8003794:	2304      	movs	r3, #4
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e111      	b.n	80039be <UART_SetConfig+0x34e>
 800379a:	2308      	movs	r3, #8
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e10e      	b.n	80039be <UART_SetConfig+0x34e>
 80037a0:	2310      	movs	r3, #16
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	bf00      	nop
 80037a6:	e10a      	b.n	80039be <UART_SetConfig+0x34e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a71      	ldr	r2, [pc, #452]	; (8003974 <UART_SetConfig+0x304>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d120      	bne.n	80037f4 <UART_SetConfig+0x184>
 80037b2:	4b6e      	ldr	r3, [pc, #440]	; (800396c <UART_SetConfig+0x2fc>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d00f      	beq.n	80037e0 <UART_SetConfig+0x170>
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d802      	bhi.n	80037ca <UART_SetConfig+0x15a>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <UART_SetConfig+0x164>
 80037c8:	e010      	b.n	80037ec <UART_SetConfig+0x17c>
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d005      	beq.n	80037da <UART_SetConfig+0x16a>
 80037ce:	2b30      	cmp	r3, #48	; 0x30
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0x176>
 80037d2:	e00b      	b.n	80037ec <UART_SetConfig+0x17c>
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0f1      	b.n	80039be <UART_SetConfig+0x34e>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e0ee      	b.n	80039be <UART_SetConfig+0x34e>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0eb      	b.n	80039be <UART_SetConfig+0x34e>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e0e8      	b.n	80039be <UART_SetConfig+0x34e>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	bf00      	nop
 80037f2:	e0e4      	b.n	80039be <UART_SetConfig+0x34e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5f      	ldr	r2, [pc, #380]	; (8003978 <UART_SetConfig+0x308>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d120      	bne.n	8003840 <UART_SetConfig+0x1d0>
 80037fe:	4b5b      	ldr	r3, [pc, #364]	; (800396c <UART_SetConfig+0x2fc>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d00f      	beq.n	800382c <UART_SetConfig+0x1bc>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d802      	bhi.n	8003816 <UART_SetConfig+0x1a6>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <UART_SetConfig+0x1b0>
 8003814:	e010      	b.n	8003838 <UART_SetConfig+0x1c8>
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d005      	beq.n	8003826 <UART_SetConfig+0x1b6>
 800381a:	2bc0      	cmp	r3, #192	; 0xc0
 800381c:	d009      	beq.n	8003832 <UART_SetConfig+0x1c2>
 800381e:	e00b      	b.n	8003838 <UART_SetConfig+0x1c8>
 8003820:	2300      	movs	r3, #0
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0cb      	b.n	80039be <UART_SetConfig+0x34e>
 8003826:	2302      	movs	r3, #2
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0c8      	b.n	80039be <UART_SetConfig+0x34e>
 800382c:	2304      	movs	r3, #4
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0c5      	b.n	80039be <UART_SetConfig+0x34e>
 8003832:	2308      	movs	r3, #8
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e0c2      	b.n	80039be <UART_SetConfig+0x34e>
 8003838:	2310      	movs	r3, #16
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	bf00      	nop
 800383e:	e0be      	b.n	80039be <UART_SetConfig+0x34e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4d      	ldr	r2, [pc, #308]	; (800397c <UART_SetConfig+0x30c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d124      	bne.n	8003894 <UART_SetConfig+0x224>
 800384a:	4b48      	ldr	r3, [pc, #288]	; (800396c <UART_SetConfig+0x2fc>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d012      	beq.n	8003880 <UART_SetConfig+0x210>
 800385a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385e:	d802      	bhi.n	8003866 <UART_SetConfig+0x1f6>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <UART_SetConfig+0x204>
 8003864:	e012      	b.n	800388c <UART_SetConfig+0x21c>
 8003866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386a:	d006      	beq.n	800387a <UART_SetConfig+0x20a>
 800386c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003870:	d009      	beq.n	8003886 <UART_SetConfig+0x216>
 8003872:	e00b      	b.n	800388c <UART_SetConfig+0x21c>
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e0a1      	b.n	80039be <UART_SetConfig+0x34e>
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e09e      	b.n	80039be <UART_SetConfig+0x34e>
 8003880:	2304      	movs	r3, #4
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e09b      	b.n	80039be <UART_SetConfig+0x34e>
 8003886:	2308      	movs	r3, #8
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e098      	b.n	80039be <UART_SetConfig+0x34e>
 800388c:	2310      	movs	r3, #16
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	bf00      	nop
 8003892:	e094      	b.n	80039be <UART_SetConfig+0x34e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a39      	ldr	r2, [pc, #228]	; (8003980 <UART_SetConfig+0x310>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d124      	bne.n	80038e8 <UART_SetConfig+0x278>
 800389e:	4b33      	ldr	r3, [pc, #204]	; (800396c <UART_SetConfig+0x2fc>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d012      	beq.n	80038d4 <UART_SetConfig+0x264>
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d802      	bhi.n	80038ba <UART_SetConfig+0x24a>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <UART_SetConfig+0x258>
 80038b8:	e012      	b.n	80038e0 <UART_SetConfig+0x270>
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038be:	d006      	beq.n	80038ce <UART_SetConfig+0x25e>
 80038c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c4:	d009      	beq.n	80038da <UART_SetConfig+0x26a>
 80038c6:	e00b      	b.n	80038e0 <UART_SetConfig+0x270>
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e077      	b.n	80039be <UART_SetConfig+0x34e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e074      	b.n	80039be <UART_SetConfig+0x34e>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e071      	b.n	80039be <UART_SetConfig+0x34e>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e06e      	b.n	80039be <UART_SetConfig+0x34e>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	bf00      	nop
 80038e6:	e06a      	b.n	80039be <UART_SetConfig+0x34e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a25      	ldr	r2, [pc, #148]	; (8003984 <UART_SetConfig+0x314>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d124      	bne.n	800393c <UART_SetConfig+0x2cc>
 80038f2:	4b1e      	ldr	r3, [pc, #120]	; (800396c <UART_SetConfig+0x2fc>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d012      	beq.n	8003928 <UART_SetConfig+0x2b8>
 8003902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003906:	d802      	bhi.n	800390e <UART_SetConfig+0x29e>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <UART_SetConfig+0x2ac>
 800390c:	e012      	b.n	8003934 <UART_SetConfig+0x2c4>
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003912:	d006      	beq.n	8003922 <UART_SetConfig+0x2b2>
 8003914:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003918:	d009      	beq.n	800392e <UART_SetConfig+0x2be>
 800391a:	e00b      	b.n	8003934 <UART_SetConfig+0x2c4>
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e04d      	b.n	80039be <UART_SetConfig+0x34e>
 8003922:	2302      	movs	r3, #2
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e04a      	b.n	80039be <UART_SetConfig+0x34e>
 8003928:	2304      	movs	r3, #4
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e047      	b.n	80039be <UART_SetConfig+0x34e>
 800392e:	2308      	movs	r3, #8
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e044      	b.n	80039be <UART_SetConfig+0x34e>
 8003934:	2310      	movs	r3, #16
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	bf00      	nop
 800393a:	e040      	b.n	80039be <UART_SetConfig+0x34e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <UART_SetConfig+0x318>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d139      	bne.n	80039ba <UART_SetConfig+0x34a>
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <UART_SetConfig+0x2fc>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003954:	d027      	beq.n	80039a6 <UART_SetConfig+0x336>
 8003956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800395a:	d817      	bhi.n	800398c <UART_SetConfig+0x31c>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01c      	beq.n	800399a <UART_SetConfig+0x32a>
 8003960:	e027      	b.n	80039b2 <UART_SetConfig+0x342>
 8003962:	bf00      	nop
 8003964:	efff69f3 	.word	0xefff69f3
 8003968:	40011000 	.word	0x40011000
 800396c:	40023800 	.word	0x40023800
 8003970:	40004400 	.word	0x40004400
 8003974:	40004800 	.word	0x40004800
 8003978:	40004c00 	.word	0x40004c00
 800397c:	40005000 	.word	0x40005000
 8003980:	40011400 	.word	0x40011400
 8003984:	40007800 	.word	0x40007800
 8003988:	40007c00 	.word	0x40007c00
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	d006      	beq.n	80039a0 <UART_SetConfig+0x330>
 8003992:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003996:	d009      	beq.n	80039ac <UART_SetConfig+0x33c>
 8003998:	e00b      	b.n	80039b2 <UART_SetConfig+0x342>
 800399a:	2300      	movs	r3, #0
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e00e      	b.n	80039be <UART_SetConfig+0x34e>
 80039a0:	2302      	movs	r3, #2
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e00b      	b.n	80039be <UART_SetConfig+0x34e>
 80039a6:	2304      	movs	r3, #4
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e008      	b.n	80039be <UART_SetConfig+0x34e>
 80039ac:	2308      	movs	r3, #8
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e005      	b.n	80039be <UART_SetConfig+0x34e>
 80039b2:	2310      	movs	r3, #16
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	bf00      	nop
 80039b8:	e001      	b.n	80039be <UART_SetConfig+0x34e>
 80039ba:	2310      	movs	r3, #16
 80039bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c6:	d17c      	bne.n	8003ac2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80039c8:	7ffb      	ldrb	r3, [r7, #31]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d859      	bhi.n	8003a82 <UART_SetConfig+0x412>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x364>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a17 	.word	0x08003a17
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a83 	.word	0x08003a83
 80039e4:	08003a4d 	.word	0x08003a4d
 80039e8:	08003a83 	.word	0x08003a83
 80039ec:	08003a83 	.word	0x08003a83
 80039f0:	08003a83 	.word	0x08003a83
 80039f4:	08003a6b 	.word	0x08003a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80039f8:	f7ff f9d6 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	005a      	lsls	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e038      	b.n	8003a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a16:	f7ff f9db 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	005a      	lsls	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	61bb      	str	r3, [r7, #24]
        break;
 8003a32:	e029      	b.n	8003a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	085a      	lsrs	r2, r3, #1
 8003a3a:	4b5d      	ldr	r3, [pc, #372]	; (8003bb0 <UART_SetConfig+0x540>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6852      	ldr	r2, [r2, #4]
 8003a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	61bb      	str	r3, [r7, #24]
        break;
 8003a4a:	e01d      	b.n	8003a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a4c:	f7ff f8c8 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003a50:	4603      	mov	r3, r0
 8003a52:	005a      	lsls	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	61bb      	str	r3, [r7, #24]
        break;
 8003a68:	e00e      	b.n	8003a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
        break;
 8003a80:	e002      	b.n	8003a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
        break;
 8003a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	d916      	bls.n	8003abc <UART_SetConfig+0x44c>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d212      	bcs.n	8003abc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f023 030f 	bic.w	r3, r3, #15
 8003a9e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	89fb      	ldrh	r3, [r7, #14]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	89fa      	ldrh	r2, [r7, #14]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e06e      	b.n	8003b9a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
 8003ac0:	e06b      	b.n	8003b9a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d857      	bhi.n	8003b78 <UART_SetConfig+0x508>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0x460>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003b11 	.word	0x08003b11
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b79 	.word	0x08003b79
 8003ae0:	08003b45 	.word	0x08003b45
 8003ae4:	08003b79 	.word	0x08003b79
 8003ae8:	08003b79 	.word	0x08003b79
 8003aec:	08003b79 	.word	0x08003b79
 8003af0:	08003b61 	.word	0x08003b61
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003af4:	f7ff f958 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	61bb      	str	r3, [r7, #24]
        break;
 8003b0e:	e036      	b.n	8003b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b10:	f7ff f95e 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	61bb      	str	r3, [r7, #24]
        break;
 8003b2a:	e028      	b.n	8003b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	085a      	lsrs	r2, r3, #1
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <UART_SetConfig+0x544>)
 8003b34:	4413      	add	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6852      	ldr	r2, [r2, #4]
 8003b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	61bb      	str	r3, [r7, #24]
        break;
 8003b42:	e01c      	b.n	8003b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b44:	f7ff f84c 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	61bb      	str	r3, [r7, #24]
        break;
 8003b5e:	e00e      	b.n	8003b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	61bb      	str	r3, [r7, #24]
        break;
 8003b76:	e002      	b.n	8003b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
        break;
 8003b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d908      	bls.n	8003b96 <UART_SetConfig+0x526>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d204      	bcs.n	8003b96 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	e001      	b.n	8003b9a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	01e84800 	.word	0x01e84800
 8003bb4:	00f42400 	.word	0x00f42400

08003bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01a      	beq.n	8003cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb6:	d10a      	bne.n	8003cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d0a:	f7fd f8f5 	bl	8000ef8 <HAL_GetTick>
 8003d0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d10e      	bne.n	8003d3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f814 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e00a      	b.n	8003d52 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6a:	e02a      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d72:	d026      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7fd f8c0 	bl	8000ef8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11b      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d0c5      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dec:	b084      	sub	sp, #16
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	f107 001c 	add.w	r0, r7, #28
 8003dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d120      	bne.n	8003e46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <USB_CoreInit+0xac>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d105      	bne.n	8003e3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa60 	bl	8004300 <USB_CoreReset>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e010      	b.n	8003e68 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa54 	bl	8004300 <USB_CoreReset>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10b      	bne.n	8003e86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f043 0206 	orr.w	r2, r3, #6
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f043 0220 	orr.w	r2, r3, #32
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e92:	b004      	add	sp, #16
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	ffbdffbf 	.word	0xffbdffbf

08003e9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 0201 	bic.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d106      	bne.n	8003eea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	e00b      	b.n	8003f02 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e001      	b.n	8003f02 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e003      	b.n	8003f0a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003f02:	2032      	movs	r0, #50	; 0x32
 8003f04:	f7fd f804 	bl	8000f10 <HAL_Delay>

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f14:	b084      	sub	sp, #16
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e009      	b.n	8003f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3340      	adds	r3, #64	; 0x40
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0e      	cmp	r3, #14
 8003f4c:	d9f2      	bls.n	8003f34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d112      	bne.n	8003f7a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e005      	b.n	8003f86 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	680b      	ldr	r3, [r1, #0]
 8003fa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f971 	bl	800429c <USB_SetDevSpeed>
 8003fba:	e018      	b.n	8003fee <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f96c 	bl	800429c <USB_SetDevSpeed>
 8003fc4:	e013      	b.n	8003fee <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d10c      	bne.n	8003fe6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f961 	bl	800429c <USB_SetDevSpeed>
 8003fda:	e008      	b.n	8003fee <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fdc:	2101      	movs	r1, #1
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f95c 	bl	800429c <USB_SetDevSpeed>
 8003fe4:	e003      	b.n	8003fee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f957 	bl	800429c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fee:	2110      	movs	r1, #16
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f90b 	bl	800420c <USB_FlushTxFifo>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f929 	bl	8004258 <USB_FlushRxFifo>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	461a      	mov	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e043      	b.n	80040c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800404c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004050:	d118      	bne.n	8004084 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e013      	b.n	8004096 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e008      	b.n	8004096 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	461a      	mov	r2, r3
 8004092:	2300      	movs	r3, #0
 8004094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	461a      	mov	r2, r3
 80040b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3301      	adds	r3, #1
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3b7      	bcc.n	800403a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e043      	b.n	8004158 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e6:	d118      	bne.n	800411a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e013      	b.n	800412c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	461a      	mov	r2, r3
 8004112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e008      	b.n	800412c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	2300      	movs	r3, #0
 800412a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3301      	adds	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	429a      	cmp	r2, r3
 800415e:	d3b7      	bcc.n	80040d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004172:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2b01      	cmp	r3, #1
 8004178:	d110      	bne.n	800419c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004180:	461a      	mov	r2, r3
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <USB_DevInit+0x2e8>)
 8004184:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	4619      	mov	r1, r3
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <USB_DevInit+0x2ec>)
 8004198:	4313      	orrs	r3, r2
 800419a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d105      	bne.n	80041bc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f043 0210 	orr.w	r2, r3, #16
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <USB_DevInit+0x2f0>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f043 0208 	orr.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <USB_DevInit+0x2f4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f8:	b004      	add	sp, #16
 80041fa:	4770      	bx	lr
 80041fc:	00800100 	.word	0x00800100
 8004200:	00010003 	.word	0x00010003
 8004204:	803c3800 	.word	0x803c3800
 8004208:	40000004 	.word	0x40000004

0800420c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <USB_FlushTxFifo+0x48>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e006      	b.n	8004246 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b20      	cmp	r3, #32
 8004242:	d0f0      	beq.n	8004226 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	00030d40 	.word	0x00030d40

08004258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2210      	movs	r2, #16
 8004268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <USB_FlushRxFifo+0x40>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e006      	b.n	800428a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b10      	cmp	r3, #16
 8004286:	d0f0      	beq.n	800426a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	00030d40 	.word	0x00030d40

0800429c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80042ee:	2003      	movs	r0, #3
 80042f0:	f7fc fe0e 	bl	8000f10 <HAL_Delay>

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a13      	ldr	r2, [pc, #76]	; (8004364 <USB_CoreReset+0x64>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e01b      	b.n	8004356 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	daf2      	bge.n	800430c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <USB_CoreReset+0x64>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e006      	b.n	8004356 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d0f0      	beq.n	8004336 <USB_CoreReset+0x36>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	00030d40 	.word	0x00030d40

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4e0d      	ldr	r6, [pc, #52]	; (80043a0 <__libc_init_array+0x38>)
 800436c:	4c0d      	ldr	r4, [pc, #52]	; (80043a4 <__libc_init_array+0x3c>)
 800436e:	1ba4      	subs	r4, r4, r6
 8004370:	10a4      	asrs	r4, r4, #2
 8004372:	2500      	movs	r5, #0
 8004374:	42a5      	cmp	r5, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	4e0b      	ldr	r6, [pc, #44]	; (80043a8 <__libc_init_array+0x40>)
 800437a:	4c0c      	ldr	r4, [pc, #48]	; (80043ac <__libc_init_array+0x44>)
 800437c:	f000 f820 	bl	80043c0 <_init>
 8004380:	1ba4      	subs	r4, r4, r6
 8004382:	10a4      	asrs	r4, r4, #2
 8004384:	2500      	movs	r5, #0
 8004386:	42a5      	cmp	r5, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004390:	4798      	blx	r3
 8004392:	3501      	adds	r5, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800439a:	4798      	blx	r3
 800439c:	3501      	adds	r5, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	080043f8 	.word	0x080043f8
 80043a4:	080043f8 	.word	0x080043f8
 80043a8:	080043f8 	.word	0x080043f8
 80043ac:	080043fc 	.word	0x080043fc

080043b0 <memset>:
 80043b0:	4402      	add	r2, r0
 80043b2:	4603      	mov	r3, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
