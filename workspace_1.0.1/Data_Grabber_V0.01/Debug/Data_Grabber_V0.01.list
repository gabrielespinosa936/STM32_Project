
Data_Grabber_V0.01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab4  08004ab4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000000c  08004ac8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08004ac8  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f4  00000000  00000000  0002f432  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b13  00000000  00000000  00032ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5e1  00000000  00000000  00058a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee52c  00000000  00000000  00063fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152510  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  0015258c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004a74 	.word	0x08004a74

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004a74 	.word	0x08004a74

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fd03 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9aa 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f98a 	bl	8000830 <MX_DMA_Init>
  MX_ETH_Init();
 800051c:	f000 f8ea 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f928 	bl	8000774 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f956 	bl	80007d4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000528:	f000 f892 	bl	8000650 <MX_ADC1_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x24>
	...

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b4      	sub	sp, #208	; 0xd0
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fa90 	bl	8004a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2284      	movs	r2, #132	; 0x84
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f004 fa81 	bl	8004a64 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000562:	f002 fb2f 	bl	8002bc4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b37      	ldr	r3, [pc, #220]	; (8000644 <SystemClock_Config+0x114>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a36      	ldr	r2, [pc, #216]	; (8000644 <SystemClock_Config+0x114>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b34      	ldr	r3, [pc, #208]	; (8000644 <SystemClock_Config+0x114>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057e:	4b32      	ldr	r3, [pc, #200]	; (8000648 <SystemClock_Config+0x118>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000586:	4a30      	ldr	r2, [pc, #192]	; (8000648 <SystemClock_Config+0x118>)
 8000588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <SystemClock_Config+0x118>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059a:	2301      	movs	r3, #1
 800059c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005bc:	2348      	movs	r3, #72	; 0x48
 80005be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fb06 	bl	8002be4 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005de:	f000 fa03 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fd5b 	bl	80030c4 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000614:	f000 f9e8 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <SystemClock_Config+0x11c>)
 800061a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800061c:	2300      	movs	r3, #0
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ff3e 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000636:	f000 f9d7 	bl	80009e8 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	37d0      	adds	r7, #208	; 0xd0
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000
 800064c:	00200100 	.word	0x00200100

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_ADC1_Init+0xa0>)
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_ADC1_Init+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006b0:	f000 fcb0 	bl	8001014 <HAL_ADC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f995 	bl	80009e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006d0:	f000 fce4 	bl	800109c <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006da:	f000 f985 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200004ac 	.word	0x200004ac
 80006ec:	40012000 	.word	0x40012000
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ETH_Init+0x78>)
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <MX_ETH_Init+0x7c>)
 80006fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ETH_Init+0x78>)
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ETH_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ETH_Init+0x78>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ETH_Init+0x78>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ETH_Init+0x78>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	3302      	adds	r3, #2
 8000722:	22e1      	movs	r2, #225	; 0xe1
 8000724:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ETH_Init+0x78>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	3303      	adds	r3, #3
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_ETH_Init+0x78>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	3304      	adds	r3, #4
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_ETH_Init+0x78>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	3305      	adds	r3, #5
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_ETH_Init+0x78>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_ETH_Init+0x78>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_ETH_Init+0x78>)
 8000752:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000756:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_ETH_Init+0x78>)
 800075a:	f001 fac7 	bl	8001cec <HAL_ETH_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000764:	f000 f940 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000554 	.word	0x20000554
 8000770:	40028000 	.word	0x40028000

08000774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART3_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007b8:	f003 fa66 	bl	8003c88 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f911 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000028 	.word	0x20000028
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2206      	movs	r2, #6
 80007e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2201      	movs	r2, #1
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	f002 f897 	bl	800294a <HAL_PCD_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f8e1 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000a8 	.word	0x200000a8

08000830 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_DMA_Init+0x38>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <MX_DMA_Init+0x38>)
 800083c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_DMA_Init+0x38>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2038      	movs	r0, #56	; 0x38
 8000854:	f000 ff2b 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000858:	2038      	movs	r0, #56	; 0x38
 800085a:	f000 ff44 	bl	80016e6 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <MX_GPIO_Init+0x164>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a40      	ldr	r2, [pc, #256]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000930:	4828      	ldr	r0, [pc, #160]	; (80009d4 <MX_GPIO_Init+0x168>)
 8000932:	f001 fff1 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4827      	ldr	r0, [pc, #156]	; (80009d8 <MX_GPIO_Init+0x16c>)
 800093c:	f001 ffec 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_GPIO_Init+0x170>)
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x174>)
 8000956:	f001 fe35 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800095a:	f244 0381 	movw	r3, #16513	; 0x4081
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <MX_GPIO_Init+0x168>)
 8000974:	f001 fe26 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_GPIO_Init+0x170>)
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4815      	ldr	r0, [pc, #84]	; (80009e4 <MX_GPIO_Init+0x178>)
 800098e:	f001 fe19 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0x16c>)
 80009aa:	f001 fe0b 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0x16c>)
 80009c2:	f001 fdff 	bl	80025c4 <HAL_GPIO_Init>

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800
 80009dc:	10110000 	.word	0x10110000
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40021400 	.word	0x40021400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_MspInit+0x44>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_MspInit+0x44>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x44>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x44>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x44>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <HAL_ADC_MspInit+0xe4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d15c      	bne.n	8000b1c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <HAL_ADC_MspInit+0xe8>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <HAL_ADC_MspInit+0xe8>)
 8000a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_ADC_MspInit+0xe8>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <HAL_ADC_MspInit+0xe8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <HAL_ADC_MspInit+0xe8>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <HAL_ADC_MspInit+0xe8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4821      	ldr	r0, [pc, #132]	; (8000b2c <HAL_ADC_MspInit+0xec>)
 8000aa6:	f001 fd8d 	bl	80025c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <HAL_ADC_MspInit+0xf4>)
 8000aae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000ae2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000af0:	2203      	movs	r2, #3
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000b02:	f000 fe0b 	bl	800171c <HAL_DMA_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 8000b0c:	f7ff ff6c 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_ADC_MspInit+0xf0>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40012000 	.word	0x40012000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	200004f4 	.word	0x200004f4
 8000b34:	40026410 	.word	0x40026410

08000b38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a4e      	ldr	r2, [pc, #312]	; (8000c90 <HAL_ETH_MspInit+0x158>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	f040 8096 	bne.w	8000c88 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a46      	ldr	r2, [pc, #280]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b88:	61fb      	str	r3, [r7, #28]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a40      	ldr	r2, [pc, #256]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c04:	2332      	movs	r3, #50	; 0x32
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481e      	ldr	r0, [pc, #120]	; (8000c98 <HAL_ETH_MspInit+0x160>)
 8000c20:	f001 fcd0 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c24:	2386      	movs	r3, #134	; 0x86
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_ETH_MspInit+0x164>)
 8000c40:	f001 fcc0 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <HAL_ETH_MspInit+0x168>)
 8000c62:	f001 fcaf 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c78:	230b      	movs	r3, #11
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <HAL_ETH_MspInit+0x16c>)
 8000c84:	f001 fc9e 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3738      	adds	r7, #56	; 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40028000 	.word	0x40028000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0x7c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d128      	bne.n	8000d1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_UART_MspInit+0x80>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000d18:	f001 fc54 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004800 	.word	0x40004800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d50:	d141      	bne.n	8000dd6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4817      	ldr	r0, [pc, #92]	; (8000de4 <HAL_PCD_MspInit+0xb4>)
 8000d88:	f001 fc1c 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <HAL_PCD_MspInit+0xb4>)
 8000da2:	f001 fc0f 	bl	80025c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000daa:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	6353      	str	r3, [r2, #52]	; 0x34
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8a8 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA2_Stream0_IRQHandler+0x10>)
 8000e4a:	f000 fd15 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200004f4 	.word	0x200004f4

08000e58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <SystemInit+0x5c>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <SystemInit+0x5c>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <SystemInit+0x60>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <SystemInit+0x60>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <SystemInit+0x60>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <SystemInit+0x60>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <SystemInit+0x60>)
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <SystemInit+0x64>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <SystemInit+0x60>)
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <SystemInit+0x68>)
 8000e8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <SystemInit+0x60>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <SystemInit+0x60>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x60>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SystemInit+0x5c>)
 8000ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea8:	609a      	str	r2, [r3, #8]
#endif
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	fef6ffff 	.word	0xfef6ffff
 8000ec0:	24003010 	.word	0x24003010

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eca:	e003      	b.n	8000ed4 <LoopCopyDataInit>

08000ecc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ece:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed2:	3104      	adds	r1, #4

08000ed4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000edc:	d3f6      	bcc.n	8000ecc <CopyDataInit>
  ldr  r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee0:	e002      	b.n	8000ee8 <LoopFillZerobss>

08000ee2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee4:	f842 3b04 	str.w	r3, [r2], #4

08000ee8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eec:	d3f9      	bcc.n	8000ee2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffb3 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f003 fd93 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb07 	bl	8000508 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000f00:	08004abc 	.word	0x08004abc
  ldr  r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f0c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f10:	200005a0 	.word	0x200005a0

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>

08000f16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 fbbc 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f000 f805 	bl	8000f30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f26:	f7ff fd67 	bl	80009f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fbd7 	bl	8001702 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	f000 fb9f 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	2000059c 	.word	0x2000059c

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000059c 	.word	0x2000059c

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_Delay+0x40>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e031      	b.n	800108e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fd04 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_ADC_Init+0x84>)
 8001058:	4013      	ands	r3, r2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f94e 	bl	8001304 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	ffffeefd 	.word	0xffffeefd

0800109c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x1c>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e115      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x248>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d935      	bls.n	8001134 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	3b1e      	subs	r3, #30
 80010de:	2207      	movs	r2, #7
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43da      	mvns	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	400a      	ands	r2, r1
 80010ec:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <HAL_ADC_ConfigChannel+0x254>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d10a      	bne.n	800110e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68d9      	ldr	r1, [r3, #12]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	061a      	lsls	r2, r3, #24
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	e035      	b.n	800117a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68d9      	ldr	r1, [r3, #12]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	4603      	mov	r3, r0
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4403      	add	r3, r0
 8001126:	3b1e      	subs	r3, #30
 8001128:	409a      	lsls	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	e022      	b.n	800117a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	2207      	movs	r2, #7
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	400a      	ands	r2, r1
 8001156:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	4603      	mov	r3, r0
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4403      	add	r3, r0
 8001170:	409a      	lsls	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b06      	cmp	r3, #6
 8001180:	d824      	bhi.n	80011cc <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	3b05      	subs	r3, #5
 8001194:	221f      	movs	r2, #31
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	400a      	ands	r2, r1
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	3b05      	subs	r3, #5
 80011be:	fa00 f203 	lsl.w	r2, r0, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ca:	e04c      	b.n	8001266 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	d824      	bhi.n	800121e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b23      	subs	r3, #35	; 0x23
 80011e6:	221f      	movs	r2, #31
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43da      	mvns	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	400a      	ands	r2, r1
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b23      	subs	r3, #35	; 0x23
 8001210:	fa00 f203 	lsl.w	r2, r0, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
 800121c:	e023      	b.n	8001266 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b41      	subs	r3, #65	; 0x41
 8001230:	221f      	movs	r2, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b41      	subs	r3, #65	; 0x41
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_ADC_ConfigChannel+0x258>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d109      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b12      	cmp	r3, #18
 8001276:	d105      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_ADC_ConfigChannel+0x25c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <HAL_ADC_ConfigChannel+0x25c>)
 800127e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001282:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_ADC_ConfigChannel+0x258>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d125      	bne.n	80012da <HAL_ADC_ConfigChannel+0x23e>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_ADC_ConfigChannel+0x254>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d003      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x204>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b11      	cmp	r3, #17
 800129e:	d11c      	bne.n	80012da <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_ADC_ConfigChannel+0x25c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_ADC_ConfigChannel+0x25c>)
 80012a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012aa:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_ADC_ConfigChannel+0x254>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d111      	bne.n	80012da <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_ADC_ConfigChannel+0x260>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_ADC_ConfigChannel+0x264>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	0c9a      	lsrs	r2, r3, #18
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	10000012 	.word	0x10000012
 80012f4:	40012000 	.word	0x40012000
 80012f8:	40012300 	.word	0x40012300
 80012fc:	20000000 	.word	0x20000000
 8001300:	431bde83 	.word	0x431bde83

08001304 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800130c:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <ADC_Init+0x1ec>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <ADC_Init+0x1ec>)
 8001312:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001316:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <ADC_Init+0x1ec>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4973      	ldr	r1, [pc, #460]	; (80014f0 <ADC_Init+0x1ec>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	021a      	lsls	r2, r3, #8
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6899      	ldr	r1, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <ADC_Init+0x1f0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d022      	beq.n	80013de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6899      	ldr	r1, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6899      	ldr	r1, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e00f      	b.n	80013fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0202 	bic.w	r2, r2, #2
 800140c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6899      	ldr	r1, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01b      	beq.n	8001464 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800143a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800144a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	035a      	lsls	r2, r3, #13
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	e007      	b.n	8001474 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001472:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	3b01      	subs	r3, #1
 8001490:	051a      	lsls	r2, r3, #20
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6899      	ldr	r1, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b6:	025a      	lsls	r2, r3, #9
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	029a      	lsls	r2, r3, #10
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40012300 	.word	0x40012300
 80014f4:	0f000001 	.word	0x0f000001

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	05fa0000 	.word	0x05fa0000

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	; (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff29 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff3e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff31 	bl	800155c <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fc46 	bl	8000fb8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e099      	b.n	800186c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001758:	e00f      	b.n	800177a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800175a:	f7ff fc2d 	bl	8000fb8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b05      	cmp	r3, #5
 8001766:	d908      	bls.n	800177a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e078      	b.n	800186c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e8      	bne.n	800175a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_DMA_Init+0x158>)
 8001794:	4013      	ands	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d107      	bne.n	80017e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4313      	orrs	r3, r2
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f023 0307 	bic.w	r3, r3, #7
 80017fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	2b04      	cmp	r3, #4
 800180c:	d117      	bne.n	800183e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f9e9 	bl	8001bf8 <DMA_CheckFifoParam>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800183a:	2301      	movs	r3, #1
 800183c:	e016      	b.n	800186c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f9a0 	bl	8001b8c <DMA_CalcBaseAndBitshift>
 800184c:	4603      	mov	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001854:	223f      	movs	r2, #63	; 0x3f
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	f010803f 	.word	0xf010803f

08001878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_DMA_IRQHandler+0x258>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_DMA_IRQHandler+0x25c>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2208      	movs	r2, #8
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2208      	movs	r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2201      	movs	r2, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2204      	movs	r2, #4
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d012      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2204      	movs	r2, #4
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2210      	movs	r2, #16
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d043      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2210      	movs	r2, #16
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d018      	beq.n	80019ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d024      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
 80019a6:	e01f      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01b      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0208 	bic.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2220      	movs	r2, #32
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 808e 	beq.w	8001b16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8086 	beq.w	8001b16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	2220      	movs	r2, #32
 8001a10:	409a      	lsls	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d136      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0216 	bic.w	r2, r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x1da>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	223f      	movs	r2, #63	; 0x3f
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d07d      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
        }
        return;
 8001a8e:	e078      	b.n	8001b82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01c      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d030      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e02b      	b.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d027      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
 8001ace:	e022      	b.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10f      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0210 	bic.w	r2, r2, #16
 8001af4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d032      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d022      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d307      	bcc.n	8001b5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f2      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x2ca>
 8001b5c:	e000      	b.n	8001b60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
 8001b80:	e000      	b.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b82:	bf00      	nop
    }
  }
}
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3b10      	subs	r3, #16
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <DMA_CalcBaseAndBitshift+0x60>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d908      	bls.n	8001bcc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	1d1a      	adds	r2, r3, #4
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	659a      	str	r2, [r3, #88]	; 0x58
 8001bca:	e006      	b.n	8001bda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	aaaaaaab 	.word	0xaaaaaaab
 8001bf0:	08004aa4 	.word	0x08004aa4
 8001bf4:	fffffc00 	.word	0xfffffc00

08001bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11f      	bne.n	8001c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d855      	bhi.n	8001cc4 <DMA_CheckFifoParam+0xcc>
 8001c18:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <DMA_CheckFifoParam+0x28>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c43 	.word	0x08001c43
 8001c28:	08001c31 	.word	0x08001c31
 8001c2c:	08001cc5 	.word	0x08001cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d045      	beq.n	8001cc8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c40:	e042      	b.n	8001cc8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c4a:	d13f      	bne.n	8001ccc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c50:	e03c      	b.n	8001ccc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d121      	bne.n	8001ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d836      	bhi.n	8001cd0 <DMA_CheckFifoParam+0xd8>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <DMA_CheckFifoParam+0x70>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c7f 	.word	0x08001c7f
 8001c70:	08001c79 	.word	0x08001c79
 8001c74:	08001c91 	.word	0x08001c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c7c:	e02f      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d024      	beq.n	8001cd4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8e:	e021      	b.n	8001cd4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c98:	d11e      	bne.n	8001cd8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c9e:	e01b      	b.n	8001cd8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d902      	bls.n	8001cac <DMA_CheckFifoParam+0xb4>
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d003      	beq.n	8001cb2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001caa:	e018      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb0:	e015      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00e      	beq.n	8001cdc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc2:	e00b      	b.n	8001cdc <DMA_CheckFifoParam+0xe4>
      break;
 8001cc4:	bf00      	nop
 8001cc6:	e00a      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;
 8001cc8:	bf00      	nop
 8001cca:	e008      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;
 8001ccc:	bf00      	nop
 8001cce:	e006      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;
 8001cd0:	bf00      	nop
 8001cd2:	e004      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;
 8001cd4:	bf00      	nop
 8001cd6:	e002      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;   
 8001cd8:	bf00      	nop
 8001cda:	e000      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;
 8001cdc:	bf00      	nop
    }
  } 
  
  return status; 
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001cfc:	4ba9      	ldr	r3, [pc, #676]	; (8001fa4 <HAL_ETH_Init+0x2b8>)
 8001cfe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e183      	b.n	800201a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe ff06 	bl	8000b38 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	4b9e      	ldr	r3, [pc, #632]	; (8001fa8 <HAL_ETH_Init+0x2bc>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	4a9d      	ldr	r2, [pc, #628]	; (8001fa8 <HAL_ETH_Init+0x2bc>)
 8001d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d36:	6453      	str	r3, [r2, #68]	; 0x44
 8001d38:	4b9b      	ldr	r3, [pc, #620]	; (8001fa8 <HAL_ETH_Init+0x2bc>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d44:	4b99      	ldr	r3, [pc, #612]	; (8001fac <HAL_ETH_Init+0x2c0>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a98      	ldr	r2, [pc, #608]	; (8001fac <HAL_ETH_Init+0x2c0>)
 8001d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d4e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d50:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_ETH_Init+0x2c0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4994      	ldr	r1, [pc, #592]	; (8001fac <HAL_ETH_Init+0x2c0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d74:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d76:	f7ff f91f 	bl	8000fb8 <HAL_GetTick>
 8001d7a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d7c:	e011      	b.n	8001da2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d7e:	f7ff f91b 	bl	8000fb8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d8c:	d909      	bls.n	8001da2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e13b      	b.n	800201a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e4      	bne.n	8001d7e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f023 031c 	bic.w	r3, r3, #28
 8001dc2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc4:	f001 fb3e 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8001dc8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4a78      	ldr	r2, [pc, #480]	; (8001fb0 <HAL_ETH_Init+0x2c4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d908      	bls.n	8001de4 <HAL_ETH_Init+0xf8>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_ETH_Init+0x2c8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d804      	bhi.n	8001de4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e027      	b.n	8001e34 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <HAL_ETH_Init+0x2c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d908      	bls.n	8001dfe <HAL_ETH_Init+0x112>
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_ETH_Init+0x2cc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d804      	bhi.n	8001dfe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f043 030c 	orr.w	r3, r3, #12
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	e01a      	b.n	8001e34 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4a6d      	ldr	r2, [pc, #436]	; (8001fb8 <HAL_ETH_Init+0x2cc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d903      	bls.n	8001e0e <HAL_ETH_Init+0x122>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <HAL_ETH_Init+0x2d0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d911      	bls.n	8001e32 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_ETH_Init+0x2d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d908      	bls.n	8001e28 <HAL_ETH_Init+0x13c>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4a69      	ldr	r2, [pc, #420]	; (8001fc0 <HAL_ETH_Init+0x2d4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d804      	bhi.n	8001e28 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e005      	b.n	8001e34 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e000      	b.n	8001e34 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e32:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e40:	2100      	movs	r1, #0
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f956 	bl	80020f4 <HAL_ETH_WritePHYRegister>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001e52:	6939      	ldr	r1, [r7, #16]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f9b3 	bl	80021c0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0d9      	b.n	800201a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001e66:	20ff      	movs	r0, #255	; 0xff
 8001e68:	f7ff f8b2 	bl	8000fd0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a7 	beq.w	8001fc4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e76:	f7ff f89f 	bl	8000fb8 <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8cd 	bl	8002024 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001e8a:	f7ff f895 	bl	8000fb8 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d90f      	bls.n	8001ebc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f98c 	bl	80021c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0ae      	b.n	800201a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0da      	beq.n	8001e7c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eca:	2100      	movs	r1, #0
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f911 	bl	80020f4 <HAL_ETH_WritePHYRegister>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001edc:	6939      	ldr	r1, [r7, #16]
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f96e 	bl	80021c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001eec:	2301      	movs	r3, #1
 8001eee:	e094      	b.n	800201a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f862 	bl	8000fb8 <HAL_GetTick>
 8001ef4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	461a      	mov	r2, r3
 8001efc:	2101      	movs	r1, #1
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f890 	bl	8002024 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f04:	f7ff f858 	bl	8000fb8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d90f      	bls.n	8001f36 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f1a:	6939      	ldr	r1, [r7, #16]
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f94f 	bl	80021c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e071      	b.n	800201a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0da      	beq.n	8001ef6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	461a      	mov	r2, r3
 8001f46:	211f      	movs	r1, #31
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f86b 	bl	8002024 <HAL_ETH_ReadPHYRegister>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f930 	bl	80021c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e056      	b.n	800201a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	e002      	b.n	8001f86 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	e037      	b.n	8002008 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e032      	b.n	8002008 <HAL_ETH_Init+0x31c>
 8001fa2:	bf00      	nop
 8001fa4:	03938700 	.word	0x03938700
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	01312cff 	.word	0x01312cff
 8001fb4:	02160ebf 	.word	0x02160ebf
 8001fb8:	039386ff 	.word	0x039386ff
 8001fbc:	05f5e0ff 	.word	0x05f5e0ff
 8001fc0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f889 	bl	80020f4 <HAL_ETH_WritePHYRegister>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8e6 	bl	80021c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00c      	b.n	800201a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002000:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002004:	f7fe ffe4 	bl	8000fd0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8d8 	bl	80021c0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop

08002024 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	460b      	mov	r3, r1
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b82      	cmp	r3, #130	; 0x82
 8002044:	d101      	bne.n	800204a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	e050      	b.n	80020ec <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2282      	movs	r2, #130	; 0x82
 800204e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 031c 	and.w	r3, r3, #28
 8002060:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8a1b      	ldrh	r3, [r3, #16]
 8002066:	02db      	lsls	r3, r3, #11
 8002068:	b29b      	uxth	r3, r3
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	019b      	lsls	r3, r3, #6
 8002074:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f023 0302 	bic.w	r3, r3, #2
 8002084:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002096:	f7fe ff8f 	bl	8000fb8 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800209c:	e015      	b.n	80020ca <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800209e:	f7fe ff8b 	bl	8000fb8 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d309      	bcc.n	80020c2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e014      	b.n	80020ec <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e4      	bne.n	800209e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	460b      	mov	r3, r1
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b42      	cmp	r3, #66	; 0x42
 8002114:	d101      	bne.n	800211a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002116:	2302      	movs	r3, #2
 8002118:	e04e      	b.n	80021b8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2242      	movs	r2, #66	; 0x42
 800211e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 031c 	and.w	r3, r3, #28
 8002130:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8a1b      	ldrh	r3, [r3, #16]
 8002136:	02db      	lsls	r3, r3, #11
 8002138:	b29b      	uxth	r3, r3
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002140:	897b      	ldrh	r3, [r7, #10]
 8002142:	019b      	lsls	r3, r3, #6
 8002144:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002170:	f7fe ff22 	bl	8000fb8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002176:	e015      	b.n	80021a4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002178:	f7fe ff1e 	bl	8000fb8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d309      	bcc.n	800219c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e00d      	b.n	80021b8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e4      	bne.n	8002178 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0b0      	sub	sp, #192	; 0xc0
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021dc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021ee:	2300      	movs	r3, #0
 80021f0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220a:	663b      	str	r3, [r7, #96]	; 0x60
 800220c:	e001      	b.n	8002212 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800221c:	2300      	movs	r3, #0
 800221e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800222c:	2340      	movs	r3, #64	; 0x40
 800222e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002298:	4bab      	ldr	r3, [pc, #684]	; (8002548 <ETH_MACDMAConfig+0x388>)
 800229a:	4013      	ands	r3, r2
 800229c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80022a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022a4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80022a8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80022aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80022ac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80022b2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80022b6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80022ba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022c0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80022c4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022c8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022cc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022d0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fe6b 	bl	8000fd0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002302:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002304:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002308:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800230a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800230c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002312:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002318:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800231a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800231e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002324:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002328:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002330:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002332:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7fe fe46 	bl	8000fd0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800234c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002356:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002360:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800236c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002370:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002374:	4013      	ands	r3, r2
 8002376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800237a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800237e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002380:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002384:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800238a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800238c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002390:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002396:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800239c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800239e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fe07 	bl	8000fd0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7fe fdf2 	bl	8000fd0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002404:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002408:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800241a:	2304      	movs	r3, #4
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800241e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800242a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800243a:	2300      	movs	r3, #0
 800243c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800243e:	2300      	movs	r3, #0
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f241 0318 	movw	r3, #4120	; 0x1018
 800244a:	4413      	add	r3, r2
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002452:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <ETH_MACDMAConfig+0x38c>)
 8002458:	4013      	ands	r3, r2
 800245a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800245e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002460:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002462:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002464:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002466:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002468:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800246a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800246c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800246e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002470:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002472:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002474:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002476:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800247a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800247e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002480:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002492:	4413      	add	r3, r2
 8002494:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002498:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f241 0318 	movw	r3, #4120	; 0x1018
 80024a2:	4413      	add	r3, r2
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7fe fd90 	bl	8000fd0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024b8:	4413      	add	r3, r2
 80024ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024be:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024c8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024cc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024d0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80024d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024d6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80024da:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7fe fd69 	bl	8000fd0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800250a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10d      	bne.n	8002530 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f241 031c 	movw	r3, #4124	; 0x101c
 800251c:	4413      	add	r3, r2
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6811      	ldr	r1, [r2, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <ETH_MACDMAConfig+0x390>)
 8002526:	431a      	orrs	r2, r3
 8002528:	f241 031c 	movw	r3, #4124	; 0x101c
 800252c:	440b      	add	r3, r1
 800252e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	461a      	mov	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f80b 	bl	8002554 <ETH_MACAddressConfig>
}
 800253e:	bf00      	nop
 8002540:	37c0      	adds	r7, #192	; 0xc0
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	ff20810f 	.word	0xff20810f
 800254c:	f8de3f23 	.word	0xf8de3f23
 8002550:	00010040 	.word	0x00010040

08002554 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3305      	adds	r3, #5
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	3204      	adds	r2, #4
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <ETH_MACAddressConfig+0x68>)
 8002576:	4413      	add	r3, r2
 8002578:	461a      	mov	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3303      	adds	r3, #3
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	061a      	lsls	r2, r3, #24
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3302      	adds	r3, #2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3301      	adds	r3, #1
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	4313      	orrs	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <ETH_MACAddressConfig+0x6c>)
 80025a6:	4413      	add	r3, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6013      	str	r3, [r2, #0]
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40028040 	.word	0x40028040
 80025c0:	40028044 	.word	0x40028044

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e175      	b.n	80028d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8164 	bne.w	80028ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x4e>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b12      	cmp	r3, #18
 8002610:	d123      	bne.n	800265a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d00b      	beq.n	80026ae <HAL_GPIO_Init+0xea>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a2:	2b11      	cmp	r3, #17
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b12      	cmp	r3, #18
 80026ac:	d130      	bne.n	8002710 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0201 	and.w	r2, r3, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80be 	beq.w	80028ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <HAL_GPIO_Init+0x320>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a64      	ldr	r2, [pc, #400]	; (80028e4 <HAL_GPIO_Init+0x320>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b62      	ldr	r3, [pc, #392]	; (80028e4 <HAL_GPIO_Init+0x320>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002766:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <HAL_GPIO_Init+0x328>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d037      	beq.n	8002802 <HAL_GPIO_Init+0x23e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x32c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d031      	beq.n	80027fe <HAL_GPIO_Init+0x23a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_GPIO_Init+0x330>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_Init+0x236>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a54      	ldr	r2, [pc, #336]	; (80028f8 <HAL_GPIO_Init+0x334>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_Init+0x232>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a53      	ldr	r2, [pc, #332]	; (80028fc <HAL_GPIO_Init+0x338>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_Init+0x22e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x33c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x22a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_GPIO_Init+0x340>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x226>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_GPIO_Init+0x344>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x222>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_GPIO_Init+0x348>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x21e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4e      	ldr	r2, [pc, #312]	; (8002910 <HAL_GPIO_Init+0x34c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x21a>
 80027da:	2309      	movs	r3, #9
 80027dc:	e012      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027de:	230a      	movs	r3, #10
 80027e0:	e010      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027e2:	2308      	movs	r3, #8
 80027e4:	e00e      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e00c      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027ea:	2306      	movs	r3, #6
 80027ec:	e00a      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x240>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002814:	4934      	ldr	r1, [pc, #208]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002822:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <HAL_GPIO_Init+0x350>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002846:	4a33      	ldr	r2, [pc, #204]	; (8002914 <HAL_GPIO_Init+0x350>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_GPIO_Init+0x350>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_GPIO_Init+0x350>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_GPIO_Init+0x350>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_GPIO_Init+0x350>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_GPIO_Init+0x350>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_GPIO_Init+0x350>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f ae86 	bls.w	80025e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	; 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40021c00 	.word	0x40021c00
 800290c:	40022000 	.word	0x40022000
 8002910:	40022400 	.word	0x40022400
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294c:	b08f      	sub	sp, #60	; 0x3c
 800294e:	af0a      	add	r7, sp, #40	; 0x28
 8002950:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e10a      	b.n	8002b72 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fe f9dd 	bl	8000d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2203      	movs	r2, #3
 800297a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fde4 	bl	8004550 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	687e      	ldr	r6, [r7, #4]
 8002990:	466d      	mov	r5, sp
 8002992:	f106 0410 	add.w	r4, r6, #16
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a6:	1d33      	adds	r3, r6, #4
 80029a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f001 fd78 	bl	80044a0 <USB_CoreInit>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0d7      	b.n	8002b72 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fdd2 	bl	8004572 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e04a      	b.n	8002a6a <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	333d      	adds	r3, #61	; 0x3d
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	b298      	uxth	r0, r3
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3342      	adds	r3, #66	; 0x42
 8002a10:	4602      	mov	r2, r0
 8002a12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	333f      	adds	r3, #63	; 0x3f
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3344      	adds	r3, #68	; 0x44
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3348      	adds	r3, #72	; 0x48
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3350      	adds	r3, #80	; 0x50
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	3301      	adds	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3af      	bcc.n	80029d4 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e044      	b.n	8002b04 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3b5      	bcc.n	8002a7a <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	687e      	ldr	r6, [r7, #4]
 8002b16:	466d      	mov	r5, sp
 8002b18:	f106 0410 	add.w	r4, r6, #16
 8002b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b2c:	1d33      	adds	r3, r6, #4
 8002b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b30:	6838      	ldr	r0, [r7, #0]
 8002b32:	f001 fd49 	bl	80045c8 <USB_DevInit>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e014      	b.n	8002b72 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f80b 	bl	8002b7c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 ff09 	bl	8004982 <USB_DevDisconnect>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	10000003 	.word	0x10000003

08002bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e25c      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c08:	4b96      	ldr	r3, [pc, #600]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d00c      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c14:	4b93      	ldr	r3, [pc, #588]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d112      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62>
 8002c20:	4b90      	ldr	r3, [pc, #576]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2e:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d06c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x130>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d168      	bne.n	8002d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e236      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x7a>
 8002c50:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a83      	ldr	r2, [pc, #524]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e02e      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x9c>
 8002c66:	4b7f      	ldr	r3, [pc, #508]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7e      	ldr	r2, [pc, #504]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b7c      	ldr	r3, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7b      	ldr	r2, [pc, #492]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xc0>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a72      	ldr	r2, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f978 	bl	8000fb8 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe f974 	bl	8000fb8 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1ea      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe8>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe f964 	bl	8000fb8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f960 	bl	8000fb8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e1d6      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x110>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d069      	beq.n	8002df6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d22:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d11c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x190>
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e1aa      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	493d      	ldr	r1, [pc, #244]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	e040      	b.n	8002df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a38      	ldr	r2, [pc, #224]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f916 	bl	8000fb8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe f912 	bl	8000fb8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e188      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4929      	ldr	r1, [pc, #164]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	e018      	b.n	8002df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f8f2 	bl	8000fb8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe f8ee 	bl	8000fb8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e164      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d038      	beq.n	8002e74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d019      	beq.n	8002e3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe f8cf 	bl	8000fb8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fe f8cb 	bl	8000fb8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e141      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x23a>
 8002e3c:	e01a      	b.n	8002e74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe f8b5 	bl	8000fb8 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe f8b1 	bl	8000fb8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d903      	bls.n	8002e68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e127      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
 8002e64:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b94      	ldr	r3, [pc, #592]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80a4 	beq.w	8002fca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b8e      	ldr	r3, [pc, #568]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a8a      	ldr	r2, [pc, #552]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x4dc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <HAL_RCC_OscConfig+0x4dc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a81      	ldr	r2, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x4dc>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f879 	bl	8000fb8 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe f875 	bl	8000fb8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	; 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0eb      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002edc:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <HAL_RCC_OscConfig+0x4dc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x31a>
 8002ef0:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a71      	ldr	r2, [pc, #452]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	e02d      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x33c>
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a69      	ldr	r2, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e01c      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x35e>
 8002f28:	4b64      	ldr	r3, [pc, #400]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a63      	ldr	r2, [pc, #396]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002f42:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d015      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe f829 	bl	8000fb8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f825 	bl	8000fb8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e099      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	4b4e      	ldr	r3, [pc, #312]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ee      	beq.n	8002f6a <HAL_RCC_OscConfig+0x386>
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f813 	bl	8000fb8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe f80f 	bl	8000fb8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e083      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4a3e      	ldr	r2, [pc, #248]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d06f      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d067      	beq.n	80030ae <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d149      	bne.n	800307a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a34      	ldr	r2, [pc, #208]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fd ffe1 	bl	8000fb8 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fd ffdd 	bl	8000fb8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e053      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	019b      	lsls	r3, r3, #6
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	3b01      	subs	r3, #1
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	4313      	orrs	r3, r2
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8003040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003044:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fd ffb1 	bl	8000fb8 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd ffad 	bl	8000fb8 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e023      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x476>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8003080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd ff97 	bl	8000fb8 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd ff93 	bl	8000fb8 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e009      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x4aa>
 80030ac:	e001      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0ce      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b69      	ldr	r3, [pc, #420]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4964      	ldr	r1, [pc, #400]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b62      	ldr	r3, [pc, #392]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b6      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a57      	ldr	r2, [pc, #348]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b52      	ldr	r3, [pc, #328]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a51      	ldr	r2, [pc, #324]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494c      	ldr	r1, [pc, #304]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d040      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07d      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b40      	ldr	r3, [pc, #256]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e071      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e069      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4935      	ldr	r1, [pc, #212]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fd fefe 	bl	8000fb8 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fd fefa 	bl	8000fb8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e051      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d210      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e030      	b.n	800327a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4915      	ldr	r1, [pc, #84]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490d      	ldr	r1, [pc, #52]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f81d 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 800325a:	4601      	mov	r1, r0
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	fa21 f303 	lsr.w	r3, r1, r3
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <HAL_RCC_ClockConfig+0x1cc>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fe5c 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	08004a8c 	.word	0x08004a8c
 8003290:	20000000 	.word	0x20000000

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d007      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x32>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d008      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x38>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80b4 	bne.w	8003428 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b5e      	ldr	r3, [pc, #376]	; (800343c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032c2:	60bb      	str	r3, [r7, #8]
       break;
 80032c4:	e0b3      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032c8:	60bb      	str	r3, [r7, #8]
      break;
 80032ca:	e0b0      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04a      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	ea03 0501 	and.w	r5, r3, r1
 80032f8:	ea04 0602 	and.w	r6, r4, r2
 80032fc:	4629      	mov	r1, r5
 80032fe:	4632      	mov	r2, r6
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	f04f 0400 	mov.w	r4, #0
 8003308:	0154      	lsls	r4, r2, #5
 800330a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800330e:	014b      	lsls	r3, r1, #5
 8003310:	4619      	mov	r1, r3
 8003312:	4622      	mov	r2, r4
 8003314:	1b49      	subs	r1, r1, r5
 8003316:	eb62 0206 	sbc.w	r2, r2, r6
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	0194      	lsls	r4, r2, #6
 8003324:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003328:	018b      	lsls	r3, r1, #6
 800332a:	1a5b      	subs	r3, r3, r1
 800332c:	eb64 0402 	sbc.w	r4, r4, r2
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	00e2      	lsls	r2, r4, #3
 800333a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800333e:	00d9      	lsls	r1, r3, #3
 8003340:	460b      	mov	r3, r1
 8003342:	4614      	mov	r4, r2
 8003344:	195b      	adds	r3, r3, r5
 8003346:	eb44 0406 	adc.w	r4, r4, r6
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	0262      	lsls	r2, r4, #9
 8003354:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003358:	0259      	lsls	r1, r3, #9
 800335a:	460b      	mov	r3, r1
 800335c:	4614      	mov	r4, r2
 800335e:	4618      	mov	r0, r3
 8003360:	4621      	mov	r1, r4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	461a      	mov	r2, r3
 800336a:	4623      	mov	r3, r4
 800336c:	f7fc ff4c 	bl	8000208 <__aeabi_uldivmod>
 8003370:	4603      	mov	r3, r0
 8003372:	460c      	mov	r4, r1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e049      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	f04f 0400 	mov.w	r4, #0
 8003382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	ea03 0501 	and.w	r5, r3, r1
 800338e:	ea04 0602 	and.w	r6, r4, r2
 8003392:	4629      	mov	r1, r5
 8003394:	4632      	mov	r2, r6
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	0154      	lsls	r4, r2, #5
 80033a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033a4:	014b      	lsls	r3, r1, #5
 80033a6:	4619      	mov	r1, r3
 80033a8:	4622      	mov	r2, r4
 80033aa:	1b49      	subs	r1, r1, r5
 80033ac:	eb62 0206 	sbc.w	r2, r2, r6
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f04f 0400 	mov.w	r4, #0
 80033b8:	0194      	lsls	r4, r2, #6
 80033ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	1a5b      	subs	r3, r3, r1
 80033c2:	eb64 0402 	sbc.w	r4, r4, r2
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	00e2      	lsls	r2, r4, #3
 80033d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033d4:	00d9      	lsls	r1, r3, #3
 80033d6:	460b      	mov	r3, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	195b      	adds	r3, r3, r5
 80033dc:	eb44 0406 	adc.w	r4, r4, r6
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	02a2      	lsls	r2, r4, #10
 80033ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033ee:	0299      	lsls	r1, r3, #10
 80033f0:	460b      	mov	r3, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	4621      	mov	r1, r4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f04f 0400 	mov.w	r4, #0
 80033fe:	461a      	mov	r2, r3
 8003400:	4623      	mov	r3, r4
 8003402:	f7fc ff01 	bl	8000208 <__aeabi_uldivmod>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	3301      	adds	r3, #1
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	60bb      	str	r3, [r7, #8]
      break;
 8003426:	e002      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800342a:	60bb      	str	r3, [r7, #8]
      break;
 800342c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342e:	68bb      	ldr	r3, [r7, #8]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	00f42400 	.word	0x00f42400
 8003440:	007a1200 	.word	0x007a1200

08003444 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4601      	mov	r1, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a9b      	lsrs	r3, r3, #10
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4a03      	ldr	r2, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08004a9c 	.word	0x08004a9c

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003488:	f7ff ffdc 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 800348c:	4601      	mov	r1, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0b5b      	lsrs	r3, r3, #13
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08004a9c 	.word	0x08004a9c

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034d4:	4b69      	ldr	r3, [pc, #420]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a68      	ldr	r2, [pc, #416]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034de:	6093      	str	r3, [r2, #8]
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	4964      	ldr	r1, [pc, #400]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003506:	4b5d      	ldr	r3, [pc, #372]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	4959      	ldr	r1, [pc, #356]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d017      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003542:	4b4e      	ldr	r3, [pc, #312]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	494a      	ldr	r1, [pc, #296]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 808b 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6413      	str	r3, [r2, #64]	; 0x40
 800359c:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fd fd00 	bl	8000fb8 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035bc:	f7fd fcfc 	bl	8000fb8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e355      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ce:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d035      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d02e      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360e:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003618:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800361a:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d114      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd fcc4 	bl	8000fb8 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fd fcc0 	bl	8000fb8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e317      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003662:	d111      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003672:	400b      	ands	r3, r1
 8003674:	4901      	ldr	r1, [pc, #4]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
 800367a:	e00b      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	0ffffcff 	.word	0x0ffffcff
 8003688:	4bb0      	ldr	r3, [pc, #704]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4aaf      	ldr	r2, [pc, #700]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800368e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003692:	6093      	str	r3, [r2, #8]
 8003694:	4bad      	ldr	r3, [pc, #692]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	49aa      	ldr	r1, [pc, #680]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036b2:	4ba6      	ldr	r3, [pc, #664]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b8:	4aa4      	ldr	r2, [pc, #656]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036c2:	4ba2      	ldr	r3, [pc, #648]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	499f      	ldr	r1, [pc, #636]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036e0:	4b9a      	ldr	r3, [pc, #616]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ee:	4997      	ldr	r1, [pc, #604]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003702:	4b92      	ldr	r3, [pc, #584]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003710:	498e      	ldr	r1, [pc, #568]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003724:	4b89      	ldr	r3, [pc, #548]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003732:	4986      	ldr	r1, [pc, #536]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003746:	4b81      	ldr	r3, [pc, #516]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	497d      	ldr	r1, [pc, #500]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003768:	4b78      	ldr	r3, [pc, #480]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4975      	ldr	r1, [pc, #468]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800378a:	4b70      	ldr	r3, [pc, #448]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f023 020c 	bic.w	r2, r3, #12
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	496c      	ldr	r1, [pc, #432]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ac:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	4964      	ldr	r1, [pc, #400]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ce:	4b5f      	ldr	r3, [pc, #380]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	495b      	ldr	r1, [pc, #364]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037f0:	4b56      	ldr	r3, [pc, #344]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	4953      	ldr	r1, [pc, #332]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003812:	4b4e      	ldr	r3, [pc, #312]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	494a      	ldr	r1, [pc, #296]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003834:	4b45      	ldr	r3, [pc, #276]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	4942      	ldr	r1, [pc, #264]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003864:	4939      	ldr	r1, [pc, #228]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003878:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003886:	4931      	ldr	r1, [pc, #196]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d011      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800389a:	4b2c      	ldr	r3, [pc, #176]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	4928      	ldr	r1, [pc, #160]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	4918      	ldr	r1, [pc, #96]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390c:	490f      	ldr	r1, [pc, #60]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d005      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003922:	f040 80d8 	bne.w	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800392c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003932:	f7fd fb41 	bl	8000fb8 <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800393a:	f7fd fb3d 	bl	8000fb8 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d903      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e196      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800394c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003950:	4b6c      	ldr	r3, [pc, #432]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d021      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11d      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800397e:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003984:	0e1b      	lsrs	r3, r3, #24
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	019a      	lsls	r2, r3, #6
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	071b      	lsls	r3, r3, #28
 80039a4:	4957      	ldr	r1, [pc, #348]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02e      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d6:	d129      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039d8:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ec:	0f1b      	lsrs	r3, r3, #28
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	019a      	lsls	r2, r3, #6
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	071b      	lsls	r3, r3, #28
 8003a0c:	493d      	ldr	r1, [pc, #244]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a14:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1a:	f023 021f 	bic.w	r2, r3, #31
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	3b01      	subs	r3, #1
 8003a24:	4937      	ldr	r1, [pc, #220]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3e:	0e1b      	lsrs	r3, r3, #24
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a46:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4c:	0f1b      	lsrs	r3, r3, #28
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	019a      	lsls	r2, r3, #6
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	071b      	lsls	r3, r3, #28
 8003a6c:	4925      	ldr	r1, [pc, #148]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d011      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	019a      	lsls	r2, r3, #6
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	071b      	lsls	r3, r3, #28
 8003a9c:	4919      	ldr	r1, [pc, #100]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fa82 	bl	8000fb8 <HAL_GetTick>
 8003ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ab8:	f7fd fa7e 	bl	8000fb8 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0d7      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f040 80cd 	bne.w	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aea:	f7fd fa65 	bl	8000fb8 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003af2:	f7fd fa61 	bl	8000fb8 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	; 0x64
 8003afe:	d903      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0ba      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003b04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b08:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b14:	d0ed      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02e      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d12a      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b3e:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b4c:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	0f1b      	lsrs	r3, r3, #28
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	019a      	lsls	r2, r3, #6
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	061b      	lsls	r3, r3, #24
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	071b      	lsls	r3, r3, #28
 8003b72:	4944      	ldr	r1, [pc, #272]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	493d      	ldr	r1, [pc, #244]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d022      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba8:	d11d      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	0e1b      	lsrs	r3, r3, #24
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb8:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	0f1b      	lsrs	r3, r3, #28
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	019a      	lsls	r2, r3, #6
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	4929      	ldr	r1, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bf2:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	0e1b      	lsrs	r3, r3, #24
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	0c1b      	lsrs	r3, r3, #16
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	019a      	lsls	r2, r3, #6
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	4917      	ldr	r1, [pc, #92]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4911      	ldr	r1, [pc, #68]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0e      	ldr	r2, [pc, #56]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c50:	f7fd f9b2 	bl	8000fb8 <HAL_GetTick>
 8003c54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c58:	f7fd f9ae 	bl	8000fb8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e007      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c76:	d1ef      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800

08003c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e040      	b.n	8003d1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fc fffc 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	; 0x24
 8003cb4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f82c 	bl	8003d24 <UART_SetConfig>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fac4 	bl	800426c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d02:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fb4b 	bl	80043b0 <UART_CheckIdleState>
 8003d1a:	4603      	mov	r3, r0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4bb1      	ldr	r3, [pc, #708]	; (8004018 <UART_SetConfig+0x2f4>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	6939      	ldr	r1, [r7, #16]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a9f      	ldr	r2, [pc, #636]	; (800401c <UART_SetConfig+0x2f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d121      	bne.n	8003de8 <UART_SetConfig+0xc4>
 8003da4:	4b9e      	ldr	r3, [pc, #632]	; (8004020 <UART_SetConfig+0x2fc>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d816      	bhi.n	8003de0 <UART_SetConfig+0xbc>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x94>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dd5 	.word	0x08003dd5
 8003dc0:	08003dcf 	.word	0x08003dcf
 8003dc4:	08003ddb 	.word	0x08003ddb
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e151      	b.n	8004072 <UART_SetConfig+0x34e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e14e      	b.n	8004072 <UART_SetConfig+0x34e>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e14b      	b.n	8004072 <UART_SetConfig+0x34e>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e148      	b.n	8004072 <UART_SetConfig+0x34e>
 8003de0:	2310      	movs	r3, #16
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	bf00      	nop
 8003de6:	e144      	b.n	8004072 <UART_SetConfig+0x34e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a8d      	ldr	r2, [pc, #564]	; (8004024 <UART_SetConfig+0x300>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d134      	bne.n	8003e5c <UART_SetConfig+0x138>
 8003df2:	4b8b      	ldr	r3, [pc, #556]	; (8004020 <UART_SetConfig+0x2fc>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d829      	bhi.n	8003e54 <UART_SetConfig+0x130>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <UART_SetConfig+0xe4>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	08003e55 	.word	0x08003e55
 8003e10:	08003e55 	.word	0x08003e55
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e49 	.word	0x08003e49
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003e43 	.word	0x08003e43
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e55 	.word	0x08003e55
 8003e38:	08003e4f 	.word	0x08003e4f
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e117      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e114      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e111      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e4e:	2308      	movs	r3, #8
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e10e      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e54:	2310      	movs	r3, #16
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	bf00      	nop
 8003e5a:	e10a      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a71      	ldr	r2, [pc, #452]	; (8004028 <UART_SetConfig+0x304>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d120      	bne.n	8003ea8 <UART_SetConfig+0x184>
 8003e66:	4b6e      	ldr	r3, [pc, #440]	; (8004020 <UART_SetConfig+0x2fc>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d00f      	beq.n	8003e94 <UART_SetConfig+0x170>
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d802      	bhi.n	8003e7e <UART_SetConfig+0x15a>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <UART_SetConfig+0x164>
 8003e7c:	e010      	b.n	8003ea0 <UART_SetConfig+0x17c>
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d005      	beq.n	8003e8e <UART_SetConfig+0x16a>
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d009      	beq.n	8003e9a <UART_SetConfig+0x176>
 8003e86:	e00b      	b.n	8003ea0 <UART_SetConfig+0x17c>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e0f1      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e0ee      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e94:	2304      	movs	r3, #4
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e0eb      	b.n	8004072 <UART_SetConfig+0x34e>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e0e8      	b.n	8004072 <UART_SetConfig+0x34e>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	bf00      	nop
 8003ea6:	e0e4      	b.n	8004072 <UART_SetConfig+0x34e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5f      	ldr	r2, [pc, #380]	; (800402c <UART_SetConfig+0x308>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d120      	bne.n	8003ef4 <UART_SetConfig+0x1d0>
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <UART_SetConfig+0x2fc>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d00f      	beq.n	8003ee0 <UART_SetConfig+0x1bc>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d802      	bhi.n	8003eca <UART_SetConfig+0x1a6>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <UART_SetConfig+0x1b0>
 8003ec8:	e010      	b.n	8003eec <UART_SetConfig+0x1c8>
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d005      	beq.n	8003eda <UART_SetConfig+0x1b6>
 8003ece:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed0:	d009      	beq.n	8003ee6 <UART_SetConfig+0x1c2>
 8003ed2:	e00b      	b.n	8003eec <UART_SetConfig+0x1c8>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e0cb      	b.n	8004072 <UART_SetConfig+0x34e>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e0c8      	b.n	8004072 <UART_SetConfig+0x34e>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e0c5      	b.n	8004072 <UART_SetConfig+0x34e>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e0c2      	b.n	8004072 <UART_SetConfig+0x34e>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	bf00      	nop
 8003ef2:	e0be      	b.n	8004072 <UART_SetConfig+0x34e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <UART_SetConfig+0x30c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d124      	bne.n	8003f48 <UART_SetConfig+0x224>
 8003efe:	4b48      	ldr	r3, [pc, #288]	; (8004020 <UART_SetConfig+0x2fc>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0c:	d012      	beq.n	8003f34 <UART_SetConfig+0x210>
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d802      	bhi.n	8003f1a <UART_SetConfig+0x1f6>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <UART_SetConfig+0x204>
 8003f18:	e012      	b.n	8003f40 <UART_SetConfig+0x21c>
 8003f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1e:	d006      	beq.n	8003f2e <UART_SetConfig+0x20a>
 8003f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f24:	d009      	beq.n	8003f3a <UART_SetConfig+0x216>
 8003f26:	e00b      	b.n	8003f40 <UART_SetConfig+0x21c>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e0a1      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e09e      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f34:	2304      	movs	r3, #4
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e09b      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e098      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f40:	2310      	movs	r3, #16
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	bf00      	nop
 8003f46:	e094      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a39      	ldr	r2, [pc, #228]	; (8004034 <UART_SetConfig+0x310>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d124      	bne.n	8003f9c <UART_SetConfig+0x278>
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <UART_SetConfig+0x2fc>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d012      	beq.n	8003f88 <UART_SetConfig+0x264>
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d802      	bhi.n	8003f6e <UART_SetConfig+0x24a>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <UART_SetConfig+0x258>
 8003f6c:	e012      	b.n	8003f94 <UART_SetConfig+0x270>
 8003f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f72:	d006      	beq.n	8003f82 <UART_SetConfig+0x25e>
 8003f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f78:	d009      	beq.n	8003f8e <UART_SetConfig+0x26a>
 8003f7a:	e00b      	b.n	8003f94 <UART_SetConfig+0x270>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e077      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f82:	2302      	movs	r3, #2
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e074      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e071      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e06e      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f94:	2310      	movs	r3, #16
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	bf00      	nop
 8003f9a:	e06a      	b.n	8004072 <UART_SetConfig+0x34e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <UART_SetConfig+0x314>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d124      	bne.n	8003ff0 <UART_SetConfig+0x2cc>
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <UART_SetConfig+0x2fc>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d012      	beq.n	8003fdc <UART_SetConfig+0x2b8>
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d802      	bhi.n	8003fc2 <UART_SetConfig+0x29e>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <UART_SetConfig+0x2ac>
 8003fc0:	e012      	b.n	8003fe8 <UART_SetConfig+0x2c4>
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	d006      	beq.n	8003fd6 <UART_SetConfig+0x2b2>
 8003fc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fcc:	d009      	beq.n	8003fe2 <UART_SetConfig+0x2be>
 8003fce:	e00b      	b.n	8003fe8 <UART_SetConfig+0x2c4>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e04d      	b.n	8004072 <UART_SetConfig+0x34e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e04a      	b.n	8004072 <UART_SetConfig+0x34e>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e047      	b.n	8004072 <UART_SetConfig+0x34e>
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e044      	b.n	8004072 <UART_SetConfig+0x34e>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	bf00      	nop
 8003fee:	e040      	b.n	8004072 <UART_SetConfig+0x34e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <UART_SetConfig+0x318>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d139      	bne.n	800406e <UART_SetConfig+0x34a>
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <UART_SetConfig+0x2fc>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004008:	d027      	beq.n	800405a <UART_SetConfig+0x336>
 800400a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400e:	d817      	bhi.n	8004040 <UART_SetConfig+0x31c>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <UART_SetConfig+0x32a>
 8004014:	e027      	b.n	8004066 <UART_SetConfig+0x342>
 8004016:	bf00      	nop
 8004018:	efff69f3 	.word	0xefff69f3
 800401c:	40011000 	.word	0x40011000
 8004020:	40023800 	.word	0x40023800
 8004024:	40004400 	.word	0x40004400
 8004028:	40004800 	.word	0x40004800
 800402c:	40004c00 	.word	0x40004c00
 8004030:	40005000 	.word	0x40005000
 8004034:	40011400 	.word	0x40011400
 8004038:	40007800 	.word	0x40007800
 800403c:	40007c00 	.word	0x40007c00
 8004040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004044:	d006      	beq.n	8004054 <UART_SetConfig+0x330>
 8004046:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800404a:	d009      	beq.n	8004060 <UART_SetConfig+0x33c>
 800404c:	e00b      	b.n	8004066 <UART_SetConfig+0x342>
 800404e:	2300      	movs	r3, #0
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e00e      	b.n	8004072 <UART_SetConfig+0x34e>
 8004054:	2302      	movs	r3, #2
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e00b      	b.n	8004072 <UART_SetConfig+0x34e>
 800405a:	2304      	movs	r3, #4
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e008      	b.n	8004072 <UART_SetConfig+0x34e>
 8004060:	2308      	movs	r3, #8
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x34e>
 8004066:	2310      	movs	r3, #16
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	bf00      	nop
 800406c:	e001      	b.n	8004072 <UART_SetConfig+0x34e>
 800406e:	2310      	movs	r3, #16
 8004070:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d17c      	bne.n	8004176 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800407c:	7ffb      	ldrb	r3, [r7, #31]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d859      	bhi.n	8004136 <UART_SetConfig+0x412>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x364>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040cb 	.word	0x080040cb
 8004090:	080040e9 	.word	0x080040e9
 8004094:	08004137 	.word	0x08004137
 8004098:	08004101 	.word	0x08004101
 800409c:	08004137 	.word	0x08004137
 80040a0:	08004137 	.word	0x08004137
 80040a4:	08004137 	.word	0x08004137
 80040a8:	0800411f 	.word	0x0800411f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80040ac:	f7ff f9d6 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80040b0:	4603      	mov	r3, r0
 80040b2:	005a      	lsls	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	61bb      	str	r3, [r7, #24]
        break;
 80040c8:	e038      	b.n	800413c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040ca:	f7ff f9db 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 80040ce:	4603      	mov	r3, r0
 80040d0:	005a      	lsls	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	61bb      	str	r3, [r7, #24]
        break;
 80040e6:	e029      	b.n	800413c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	085a      	lsrs	r2, r3, #1
 80040ee:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <UART_SetConfig+0x540>)
 80040f0:	4413      	add	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6852      	ldr	r2, [r2, #4]
 80040f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	61bb      	str	r3, [r7, #24]
        break;
 80040fe:	e01d      	b.n	800413c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004100:	f7ff f8c8 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8004104:	4603      	mov	r3, r0
 8004106:	005a      	lsls	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	b29b      	uxth	r3, r3
 800411a:	61bb      	str	r3, [r7, #24]
        break;
 800411c:	e00e      	b.n	800413c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	b29b      	uxth	r3, r3
 8004132:	61bb      	str	r3, [r7, #24]
        break;
 8004134:	e002      	b.n	800413c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
        break;
 800413a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d916      	bls.n	8004170 <UART_SetConfig+0x44c>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d212      	bcs.n	8004170 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f023 030f 	bic.w	r3, r3, #15
 8004152:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	b29a      	uxth	r2, r3
 8004160:	89fb      	ldrh	r3, [r7, #14]
 8004162:	4313      	orrs	r3, r2
 8004164:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	89fa      	ldrh	r2, [r7, #14]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	e06e      	b.n	800424e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
 8004174:	e06b      	b.n	800424e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004176:	7ffb      	ldrb	r3, [r7, #31]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d857      	bhi.n	800422c <UART_SetConfig+0x508>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <UART_SetConfig+0x460>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041c5 	.word	0x080041c5
 800418c:	080041e1 	.word	0x080041e1
 8004190:	0800422d 	.word	0x0800422d
 8004194:	080041f9 	.word	0x080041f9
 8004198:	0800422d 	.word	0x0800422d
 800419c:	0800422d 	.word	0x0800422d
 80041a0:	0800422d 	.word	0x0800422d
 80041a4:	08004215 	.word	0x08004215
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041a8:	f7ff f958 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	61bb      	str	r3, [r7, #24]
        break;
 80041c2:	e036      	b.n	8004232 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041c4:	f7ff f95e 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	b29b      	uxth	r3, r3
 80041dc:	61bb      	str	r3, [r7, #24]
        break;
 80041de:	e028      	b.n	8004232 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	085a      	lsrs	r2, r3, #1
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <UART_SetConfig+0x544>)
 80041e8:	4413      	add	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6852      	ldr	r2, [r2, #4]
 80041ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	61bb      	str	r3, [r7, #24]
        break;
 80041f6:	e01c      	b.n	8004232 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041f8:	f7ff f84c 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	441a      	add	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	61bb      	str	r3, [r7, #24]
        break;
 8004212:	e00e      	b.n	8004232 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	b29b      	uxth	r3, r3
 8004228:	61bb      	str	r3, [r7, #24]
        break;
 800422a:	e002      	b.n	8004232 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
        break;
 8004230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d908      	bls.n	800424a <UART_SetConfig+0x526>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d204      	bcs.n	800424a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	60da      	str	r2, [r3, #12]
 8004248:	e001      	b.n	800424e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	01e84800 	.word	0x01e84800
 8004268:	00f42400 	.word	0x00f42400

0800426c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d10a      	bne.n	8004382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043be:	f7fc fdfb 	bl	8000fb8 <HAL_GetTick>
 80043c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d10e      	bne.n	80043f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f814 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e00a      	b.n	8004406 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441e:	e02a      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d026      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004428:	f7fc fdc6 	bl	8000fb8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <UART_WaitOnFlagUntilTimeout+0x30>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11b      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800444c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	429a      	cmp	r2, r3
 8004492:	d0c5      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044a0:	b084      	sub	sp, #16
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	f107 001c 	add.w	r0, r7, #28
 80044ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d120      	bne.n	80044fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <USB_CoreInit+0xac>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa60 	bl	80049b4 <USB_CoreReset>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e010      	b.n	800451c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa54 	bl	80049b4 <USB_CoreReset>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10b      	bne.n	800453a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f043 0206 	orr.w	r2, r3, #6
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004546:	b004      	add	sp, #16
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	ffbdffbf 	.word	0xffbdffbf

08004550 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 0201 	bic.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	e00b      	b.n	80045b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e001      	b.n	80045b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e003      	b.n	80045be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045b6:	2032      	movs	r0, #50	; 0x32
 80045b8:	f7fc fd0a 	bl	8000fd0 <HAL_Delay>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c8:	b084      	sub	sp, #16
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	e009      	b.n	80045fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3340      	adds	r3, #64	; 0x40
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3301      	adds	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b0e      	cmp	r3, #14
 8004600:	d9f2      	bls.n	80045e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d112      	bne.n	800462e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e005      	b.n	800463a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	4619      	mov	r1, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	461a      	mov	r2, r3
 8004656:	680b      	ldr	r3, [r1, #0]
 8004658:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10c      	bne.n	800467a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f971 	bl	8004950 <USB_SetDevSpeed>
 800466e:	e018      	b.n	80046a2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004670:	2101      	movs	r1, #1
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f96c 	bl	8004950 <USB_SetDevSpeed>
 8004678:	e013      	b.n	80046a2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	2b03      	cmp	r3, #3
 800467e:	d10c      	bne.n	800469a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004686:	2100      	movs	r1, #0
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f961 	bl	8004950 <USB_SetDevSpeed>
 800468e:	e008      	b.n	80046a2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004690:	2101      	movs	r1, #1
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f95c 	bl	8004950 <USB_SetDevSpeed>
 8004698:	e003      	b.n	80046a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800469a:	2103      	movs	r1, #3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f957 	bl	8004950 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046a2:	2110      	movs	r1, #16
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f90b 	bl	80048c0 <USB_FlushTxFifo>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f929 	bl	800490c <USB_FlushRxFifo>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	461a      	mov	r2, r3
 80046d8:	2300      	movs	r3, #0
 80046da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e2:	461a      	mov	r2, r3
 80046e4:	2300      	movs	r3, #0
 80046e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e043      	b.n	8004776 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004704:	d118      	bne.n	8004738 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	461a      	mov	r2, r3
 800471a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e013      	b.n	800474a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	461a      	mov	r2, r3
 8004730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e008      	b.n	800474a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	461a      	mov	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	461a      	mov	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	461a      	mov	r2, r3
 800476a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800476e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	3301      	adds	r3, #1
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3b7      	bcc.n	80046ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e043      	b.n	800480c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800479a:	d118      	bne.n	80047ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	461a      	mov	r2, r3
 80047b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e013      	b.n	80047e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	461a      	mov	r2, r3
 80047c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e008      	b.n	80047e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	2300      	movs	r3, #0
 80047de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	461a      	mov	r2, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	461a      	mov	r2, r3
 8004800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3301      	adds	r3, #1
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d3b7      	bcc.n	8004784 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004826:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	2b01      	cmp	r3, #1
 800482c:	d110      	bne.n	8004850 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	461a      	mov	r2, r3
 8004836:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <USB_DevInit+0x2e8>)
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	4619      	mov	r1, r3
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <USB_DevInit+0x2ec>)
 800484c:	4313      	orrs	r3, r2
 800484e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800485c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <USB_DevInit+0x2f0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f043 0208 	orr.w	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <USB_DevInit+0x2f4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ac:	b004      	add	sp, #16
 80048ae:	4770      	bx	lr
 80048b0:	00800100 	.word	0x00800100
 80048b4:	00010003 	.word	0x00010003
 80048b8:	803c3800 	.word	0x803c3800
 80048bc:	40000004 	.word	0x40000004

080048c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <USB_FlushTxFifo+0x48>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e006      	b.n	80048fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d0f0      	beq.n	80048da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	00030d40 	.word	0x00030d40

0800490c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2210      	movs	r2, #16
 800491c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <USB_FlushRxFifo+0x40>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e006      	b.n	800493e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b10      	cmp	r3, #16
 800493a:	d0f0      	beq.n	800491e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	00030d40 	.word	0x00030d40

08004950 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80049a2:	2003      	movs	r0, #3
 80049a4:	f7fc fb14 	bl	8000fd0 <HAL_Delay>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3301      	adds	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <USB_CoreReset+0x64>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e01b      	b.n	8004a0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	daf2      	bge.n	80049c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <USB_CoreReset+0x64>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e006      	b.n	8004a0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d0f0      	beq.n	80049ea <USB_CoreReset+0x36>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	00030d40 	.word	0x00030d40

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4e0d      	ldr	r6, [pc, #52]	; (8004a54 <__libc_init_array+0x38>)
 8004a20:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1ba4      	subs	r4, r4, r6
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	2500      	movs	r5, #0
 8004a28:	42a5      	cmp	r5, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4e0b      	ldr	r6, [pc, #44]	; (8004a5c <__libc_init_array+0x40>)
 8004a2e:	4c0c      	ldr	r4, [pc, #48]	; (8004a60 <__libc_init_array+0x44>)
 8004a30:	f000 f820 	bl	8004a74 <_init>
 8004a34:	1ba4      	subs	r4, r4, r6
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	2500      	movs	r5, #0
 8004a3a:	42a5      	cmp	r5, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a44:	4798      	blx	r3
 8004a46:	3501      	adds	r5, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a4e:	4798      	blx	r3
 8004a50:	3501      	adds	r5, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08004ab4 	.word	0x08004ab4
 8004a58:	08004ab4 	.word	0x08004ab4
 8004a5c:	08004ab4 	.word	0x08004ab4
 8004a60:	08004ab8 	.word	0x08004ab8

08004a64 <memset>:
 8004a64:	4402      	add	r2, r0
 8004a66:	4603      	mov	r3, r0
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <memset+0xa>
 8004a6c:	4770      	bx	lr
 8004a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a72:	e7f9      	b.n	8004a68 <memset+0x4>

08004a74 <_init>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr

08004a80 <_fini>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr
